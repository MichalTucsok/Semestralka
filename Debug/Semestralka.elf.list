
Semestralka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080011fc  080011fc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080011fc  080011fc  000111fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001200  08001200  00011200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  20000004  08001208  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000038  08001208  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006b55  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000104d  00000000  00000000  00026b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008b8  00000000  00000000  00027bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000800  00000000  00000000  00028488  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002b0c  00000000  00000000  00028c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027a9  00000000  00000000  0002b794  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002df3d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000252c  00000000  00000000  0002dfbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000304e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	080011e4 	.word	0x080011e4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	080011e4 	.word	0x080011e4

0800017c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	4608      	mov	r0, r1
 8000186:	4611      	mov	r1, r2
 8000188:	461a      	mov	r2, r3
 800018a:	4603      	mov	r3, r0
 800018c:	70fb      	strb	r3, [r7, #3]
 800018e:	460b      	mov	r3, r1
 8000190:	70bb      	strb	r3, [r7, #2]
 8000192:	4613      	mov	r3, r2
 8000194:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000196:	2300      	movs	r3, #0
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	2300      	movs	r3, #0
 800019c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 800019e:	78fb      	ldrb	r3, [r7, #3]
 80001a0:	2b1d      	cmp	r3, #29
 80001a2:	d923      	bls.n	80001ec <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80001a8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 80001aa:	78fb      	ldrb	r3, [r7, #3]
 80001ac:	f1a3 021e 	sub.w	r2, r3, #30
 80001b0:	4613      	mov	r3, r2
 80001b2:	005b      	lsls	r3, r3, #1
 80001b4:	4413      	add	r3, r2
 80001b6:	2207      	movs	r2, #7
 80001b8:	fa02 f303 	lsl.w	r3, r2, r3
 80001bc:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	43db      	mvns	r3, r3
 80001c2:	68fa      	ldr	r2, [r7, #12]
 80001c4:	4013      	ands	r3, r2
 80001c6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 80001c8:	7879      	ldrb	r1, [r7, #1]
 80001ca:	78fb      	ldrb	r3, [r7, #3]
 80001cc:	f1a3 021e 	sub.w	r2, r3, #30
 80001d0:	4613      	mov	r3, r2
 80001d2:	005b      	lsls	r3, r3, #1
 80001d4:	4413      	add	r3, r2
 80001d6:	fa01 f303 	lsl.w	r3, r1, r3
 80001da:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	4313      	orrs	r3, r2
 80001e2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68fa      	ldr	r2, [r7, #12]
 80001e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80001ea:	e06c      	b.n	80002c6 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 80001ec:	78fb      	ldrb	r3, [r7, #3]
 80001ee:	2b13      	cmp	r3, #19
 80001f0:	d923      	bls.n	800023a <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	68db      	ldr	r3, [r3, #12]
 80001f6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 80001f8:	78fb      	ldrb	r3, [r7, #3]
 80001fa:	f1a3 0214 	sub.w	r2, r3, #20
 80001fe:	4613      	mov	r3, r2
 8000200:	005b      	lsls	r3, r3, #1
 8000202:	4413      	add	r3, r2
 8000204:	2207      	movs	r2, #7
 8000206:	fa02 f303 	lsl.w	r3, r2, r3
 800020a:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	43db      	mvns	r3, r3
 8000210:	68fa      	ldr	r2, [r7, #12]
 8000212:	4013      	ands	r3, r2
 8000214:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 8000216:	7879      	ldrb	r1, [r7, #1]
 8000218:	78fb      	ldrb	r3, [r7, #3]
 800021a:	f1a3 0214 	sub.w	r2, r3, #20
 800021e:	4613      	mov	r3, r2
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	4413      	add	r3, r2
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
 8000228:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	4313      	orrs	r3, r2
 8000230:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	68fa      	ldr	r2, [r7, #12]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	e045      	b.n	80002c6 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 800023a:	78fb      	ldrb	r3, [r7, #3]
 800023c:	2b09      	cmp	r3, #9
 800023e:	d923      	bls.n	8000288 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	691b      	ldr	r3, [r3, #16]
 8000244:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 8000246:	78fb      	ldrb	r3, [r7, #3]
 8000248:	f1a3 020a 	sub.w	r2, r3, #10
 800024c:	4613      	mov	r3, r2
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	4413      	add	r3, r2
 8000252:	2207      	movs	r2, #7
 8000254:	fa02 f303 	lsl.w	r3, r2, r3
 8000258:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	43db      	mvns	r3, r3
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	4013      	ands	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000264:	7879      	ldrb	r1, [r7, #1]
 8000266:	78fb      	ldrb	r3, [r7, #3]
 8000268:	f1a3 020a 	sub.w	r2, r3, #10
 800026c:	4613      	mov	r3, r2
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	4413      	add	r3, r2
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
 8000276:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	611a      	str	r2, [r3, #16]
 8000286:	e01e      	b.n	80002c6 <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 800028e:	78fa      	ldrb	r2, [r7, #3]
 8000290:	4613      	mov	r3, r2
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	4413      	add	r3, r2
 8000296:	2207      	movs	r2, #7
 8000298:	fa02 f303 	lsl.w	r3, r2, r3
 800029c:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	43db      	mvns	r3, r3
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	4013      	ands	r3, r2
 80002a6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80002a8:	7879      	ldrb	r1, [r7, #1]
 80002aa:	78fa      	ldrb	r2, [r7, #3]
 80002ac:	4613      	mov	r3, r2
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	4413      	add	r3, r2
 80002b2:	fa01 f303 	lsl.w	r3, r1, r3
 80002b6:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80002b8:	68fa      	ldr	r2, [r7, #12]
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	4313      	orrs	r3, r2
 80002be:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80002c6:	78bb      	ldrb	r3, [r7, #2]
 80002c8:	2b06      	cmp	r3, #6
 80002ca:	d821      	bhi.n	8000310 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 80002d2:	78bb      	ldrb	r3, [r7, #2]
 80002d4:	1e5a      	subs	r2, r3, #1
 80002d6:	4613      	mov	r3, r2
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	4413      	add	r3, r2
 80002dc:	221f      	movs	r2, #31
 80002de:	fa02 f303 	lsl.w	r3, r2, r3
 80002e2:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	43db      	mvns	r3, r3
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	4013      	ands	r3, r2
 80002ec:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80002ee:	78f9      	ldrb	r1, [r7, #3]
 80002f0:	78bb      	ldrb	r3, [r7, #2]
 80002f2:	1e5a      	subs	r2, r3, #1
 80002f4:	4613      	mov	r3, r2
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	4413      	add	r3, r2
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	4313      	orrs	r3, r2
 8000306:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800030e:	e095      	b.n	800043c <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000310:	78bb      	ldrb	r3, [r7, #2]
 8000312:	2b0c      	cmp	r3, #12
 8000314:	d821      	bhi.n	800035a <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800031a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 800031c:	78bb      	ldrb	r3, [r7, #2]
 800031e:	1fda      	subs	r2, r3, #7
 8000320:	4613      	mov	r3, r2
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	4413      	add	r3, r2
 8000326:	221f      	movs	r2, #31
 8000328:	fa02 f303 	lsl.w	r3, r2, r3
 800032c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	43db      	mvns	r3, r3
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	4013      	ands	r3, r2
 8000336:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000338:	78f9      	ldrb	r1, [r7, #3]
 800033a:	78bb      	ldrb	r3, [r7, #2]
 800033c:	1fda      	subs	r2, r3, #7
 800033e:	4613      	mov	r3, r2
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	4413      	add	r3, r2
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	4313      	orrs	r3, r2
 8000350:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000358:	e070      	b.n	800043c <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 800035a:	78bb      	ldrb	r3, [r7, #2]
 800035c:	2b12      	cmp	r3, #18
 800035e:	d823      	bhi.n	80003a8 <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 8000366:	78bb      	ldrb	r3, [r7, #2]
 8000368:	f1a3 020d 	sub.w	r2, r3, #13
 800036c:	4613      	mov	r3, r2
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	4413      	add	r3, r2
 8000372:	221f      	movs	r2, #31
 8000374:	fa02 f303 	lsl.w	r3, r2, r3
 8000378:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	43db      	mvns	r3, r3
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	4013      	ands	r3, r2
 8000382:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000384:	78f9      	ldrb	r1, [r7, #3]
 8000386:	78bb      	ldrb	r3, [r7, #2]
 8000388:	f1a3 020d 	sub.w	r2, r3, #13
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	4313      	orrs	r3, r2
 800039e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80003a6:	e049      	b.n	800043c <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 80003a8:	78bb      	ldrb	r3, [r7, #2]
 80003aa:	2b18      	cmp	r3, #24
 80003ac:	d823      	bhi.n	80003f6 <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 80003b4:	78bb      	ldrb	r3, [r7, #2]
 80003b6:	f1a3 0213 	sub.w	r2, r3, #19
 80003ba:	4613      	mov	r3, r2
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	4413      	add	r3, r2
 80003c0:	221f      	movs	r2, #31
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	43db      	mvns	r3, r3
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	4013      	ands	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 80003d2:	78f9      	ldrb	r1, [r7, #3]
 80003d4:	78bb      	ldrb	r3, [r7, #2]
 80003d6:	f1a3 0213 	sub.w	r2, r3, #19
 80003da:	4613      	mov	r3, r2
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	4413      	add	r3, r2
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003e6:	68fa      	ldr	r2, [r7, #12]
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80003f4:	e022      	b.n	800043c <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 80003fc:	78bb      	ldrb	r3, [r7, #2]
 80003fe:	f1a3 0219 	sub.w	r2, r3, #25
 8000402:	4613      	mov	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	221f      	movs	r2, #31
 800040a:	fa02 f303 	lsl.w	r3, r2, r3
 800040e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	43db      	mvns	r3, r3
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	4013      	ands	r3, r2
 8000418:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 800041a:	78f9      	ldrb	r1, [r7, #3]
 800041c:	78bb      	ldrb	r3, [r7, #2]
 800041e:	f1a3 0219 	sub.w	r2, r3, #25
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	4313      	orrs	r3, r2
 8000434:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800043c:	bf00      	nop
 800043e:	3714      	adds	r7, #20
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	609a      	str	r2, [r3, #8]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000474:	b29b      	uxth	r3, r3
}
 8000476:	4618      	mov	r0, r3
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800048c:	2300      	movs	r3, #0
 800048e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	887b      	ldrh	r3, [r7, #2]
 8000496:	4013      	ands	r3, r2
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800049c:	2301      	movs	r3, #1
 800049e:	73fb      	strb	r3, [r7, #15]
 80004a0:	e001      	b.n	80004a6 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80004a2:	2300      	movs	r3, #0
 80004a4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b087      	sub	sp, #28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
 80004c2:	2300      	movs	r3, #0
 80004c4:	613b      	str	r3, [r7, #16]
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	e07e      	b.n	80005ce <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004d0:	2201      	movs	r2, #1
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	fa02 f303 	lsl.w	r3, r2, r3
 80004d8:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	4013      	ands	r3, r2
 80004e2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004e4:	68fa      	ldr	r2, [r7, #12]
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d16d      	bne.n	80005c8 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	2103      	movs	r1, #3
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	43db      	mvns	r3, r3
 80004fc:	401a      	ands	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	4619      	mov	r1, r3
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	fa01 f303 	lsl.w	r3, r1, r3
 8000514:	431a      	orrs	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d003      	beq.n	800052a <GPIO_Init+0x76>
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	2b02      	cmp	r3, #2
 8000528:	d136      	bne.n	8000598 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2103      	movs	r1, #3
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	43db      	mvns	r3, r3
 800053a:	401a      	ands	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	4619      	mov	r1, r3
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	431a      	orrs	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	889b      	ldrh	r3, [r3, #4]
 800055c:	b29a      	uxth	r2, r3
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	b29b      	uxth	r3, r3
 8000562:	2101      	movs	r1, #1
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	b29b      	uxth	r3, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	b29b      	uxth	r3, r3
 800056e:	4013      	ands	r3, r2
 8000570:	b29a      	uxth	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	889b      	ldrh	r3, [r3, #4]
 800057a:	b29b      	uxth	r3, r3
 800057c:	b21a      	sxth	r2, r3
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	799b      	ldrb	r3, [r3, #6]
 8000582:	4619      	mov	r1, r3
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	b29b      	uxth	r3, r3
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	b21b      	sxth	r3, r3
 800058e:	4313      	orrs	r3, r2
 8000590:	b21b      	sxth	r3, r3
 8000592:	b29a      	uxth	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	2103      	movs	r1, #3
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	401a      	ands	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68da      	ldr	r2, [r3, #12]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	79db      	ldrb	r3, [r3, #7]
 80005b8:	4619      	mov	r1, r3
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	fa01 f303 	lsl.w	r3, r1, r3
 80005c2:	431a      	orrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	3301      	adds	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2b0f      	cmp	r3, #15
 80005d2:	f67f af7d 	bls.w	80004d0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80005d6:	bf00      	nop
 80005d8:	371c      	adds	r7, #28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]
 80005ec:	4613      	mov	r3, r2
 80005ee:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005f8:	787a      	ldrb	r2, [r7, #1]
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	f003 0307 	and.w	r3, r3, #7
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	08db      	lsrs	r3, r3, #3
 800060c:	b29b      	uxth	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	08db      	lsrs	r3, r3, #3
 8000614:	b29b      	uxth	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3208      	adds	r2, #8
 800061c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000620:	887b      	ldrh	r3, [r7, #2]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	210f      	movs	r1, #15
 800062a:	fa01 f303 	lsl.w	r3, r1, r3
 800062e:	43db      	mvns	r3, r3
 8000630:	ea02 0103 	and.w	r1, r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f100 0208 	add.w	r2, r0, #8
 800063a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	08db      	lsrs	r3, r3, #3
 8000642:	b29b      	uxth	r3, r3
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3208      	adds	r2, #8
 800064a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	4313      	orrs	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000654:	887b      	ldrh	r3, [r7, #2]
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	b29b      	uxth	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3208      	adds	r2, #8
 8000660:	68b9      	ldr	r1, [r7, #8]
 8000662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d006      	beq.n	8000690 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000682:	4909      	ldr	r1, [pc, #36]	; (80006a8 <RCC_AHBPeriphClockCmd+0x38>)
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <RCC_AHBPeriphClockCmd+0x38>)
 8000686:	69da      	ldr	r2, [r3, #28]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4313      	orrs	r3, r2
 800068c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800068e:	e006      	b.n	800069e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000690:	4905      	ldr	r1, [pc, #20]	; (80006a8 <RCC_AHBPeriphClockCmd+0x38>)
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <RCC_AHBPeriphClockCmd+0x38>)
 8000694:	69da      	ldr	r2, [r3, #28]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	43db      	mvns	r3, r3
 800069a:	4013      	ands	r3, r2
 800069c:	61cb      	str	r3, [r1, #28]
  }
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800

080006ac <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006be:	4909      	ldr	r1, [pc, #36]	; (80006e4 <RCC_APB1PeriphClockCmd+0x38>)
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <RCC_APB1PeriphClockCmd+0x38>)
 80006c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006ca:	e006      	b.n	80006da <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006cc:	4905      	ldr	r1, [pc, #20]	; (80006e4 <RCC_APB1PeriphClockCmd+0x38>)
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <RCC_APB1PeriphClockCmd+0x38>)
 80006d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	43db      	mvns	r3, r3
 80006d6:	4013      	ands	r3, r2
 80006d8:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	40023800 	.word	0x40023800

080006e8 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000702:	d00b      	beq.n	800071c <TIM_TimeBaseInit+0x34>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <TIM_TimeBaseInit+0x90>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d007      	beq.n	800071c <TIM_TimeBaseInit+0x34>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a1b      	ldr	r2, [pc, #108]	; (800077c <TIM_TimeBaseInit+0x94>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d003      	beq.n	800071c <TIM_TimeBaseInit+0x34>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <TIM_TimeBaseInit+0x98>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d108      	bne.n	800072e <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800071c:	89fb      	ldrh	r3, [r7, #14]
 800071e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000722:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	885a      	ldrh	r2, [r3, #2]
 8000728:	89fb      	ldrh	r3, [r7, #14]
 800072a:	4313      	orrs	r3, r2
 800072c:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <TIM_TimeBaseInit+0x9c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d00c      	beq.n	8000750 <TIM_TimeBaseInit+0x68>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <TIM_TimeBaseInit+0xa0>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d008      	beq.n	8000750 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000744:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	891a      	ldrh	r2, [r3, #8]
 800074a:	89fb      	ldrh	r3, [r7, #14]
 800074c:	4313      	orrs	r3, r2
 800074e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	89fa      	ldrh	r2, [r7, #14]
 8000754:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	881a      	ldrh	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2201      	movs	r2, #1
 800076a:	829a      	strh	r2, [r3, #20]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40000400 	.word	0x40000400
 800077c:	40000800 	.word	0x40000800
 8000780:	40000c00 	.word	0x40000c00
 8000784:	40001000 	.word	0x40001000
 8000788:	40001400 	.word	0x40001400

0800078c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d008      	beq.n	80007b0 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 80007ae:	e007      	b.n	80007c0 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	801a      	strh	r2, [r3, #0]
  }
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d008      	beq.n	80007f0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80007ee:	e007      	b.n	8000800 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	f023 0301 	bic.w	r3, r3, #1
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	801a      	strh	r2, [r3, #0]
  }
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop

0800080c <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	81fb      	strh	r3, [r7, #14]
 800081a:	2300      	movs	r3, #0
 800081c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	8c1b      	ldrh	r3, [r3, #32]
 8000822:	b29b      	uxth	r3, r3
 8000824:	f023 0301 	bic.w	r3, r3, #1
 8000828:	b29a      	uxth	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	8c1b      	ldrh	r3, [r3, #32]
 8000832:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	8b1b      	ldrh	r3, [r3, #24]
 8000838:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000840:	81fb      	strh	r3, [r7, #14]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	f023 0303 	bic.w	r3, r3, #3
 8000848:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	881a      	ldrh	r2, [r3, #0]
 800084e:	89fb      	ldrh	r3, [r7, #14]
 8000850:	4313      	orrs	r3, r2
 8000852:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8000854:	89bb      	ldrh	r3, [r7, #12]
 8000856:	f023 0302 	bic.w	r3, r3, #2
 800085a:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	891a      	ldrh	r2, [r3, #8]
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	4313      	orrs	r3, r2
 8000864:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	885a      	ldrh	r2, [r3, #2]
 800086a:	89bb      	ldrh	r3, [r7, #12]
 800086c:	4313      	orrs	r3, r2
 800086e:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	89fa      	ldrh	r2, [r7, #14]
 800087c:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	89ba      	ldrh	r2, [r7, #12]
 8000882:	841a      	strh	r2, [r3, #32]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop

08000890 <TIM_OC3Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	81fb      	strh	r3, [r7, #14]
 800089e:	2300      	movs	r3, #0
 80008a0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	8c1b      	ldrh	r3, [r3, #32]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	8c1b      	ldrh	r3, [r3, #32]
 80008b6:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	8b9b      	ldrh	r3, [r3, #28]
 80008bc:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008c4:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	881a      	ldrh	r2, [r3, #0]
 80008ca:	89fb      	ldrh	r3, [r7, #14]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80008d0:	89bb      	ldrh	r3, [r7, #12]
 80008d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008d6:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	891b      	ldrh	r3, [r3, #8]
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	b29a      	uxth	r2, r3
 80008e0:	89bb      	ldrh	r3, [r7, #12]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	885b      	ldrh	r3, [r3, #2]
 80008ea:	021b      	lsls	r3, r3, #8
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	89bb      	ldrh	r3, [r7, #12]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	89fa      	ldrh	r2, [r7, #14]
 8000900:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	89ba      	ldrh	r2, [r7, #12]
 8000906:	841a      	strh	r2, [r3, #32]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop

08000914 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	8b1b      	ldrh	r3, [r3, #24]
 8000928:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 800092a:	89fb      	ldrh	r3, [r7, #14]
 800092c:	f023 0308 	bic.w	r3, r3, #8
 8000930:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000932:	89fa      	ldrh	r2, [r7, #14]
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	4313      	orrs	r3, r2
 8000938:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	89fa      	ldrh	r2, [r7, #14]
 800093e:	831a      	strh	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	8b9b      	ldrh	r3, [r3, #28]
 8000960:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	f023 0308 	bic.w	r3, r3, #8
 8000968:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800096a:	89fa      	ldrh	r2, [r7, #14]
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	4313      	orrs	r3, r2
 8000970:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	89fa      	ldrh	r2, [r7, #14]
 8000976:	839a      	strh	r2, [r3, #28]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <TIM_GetFlagStatus>:
  *     TIM_FLAG_CC1OF or TIM_FLAG_CC2OF flags.  
  * @note TIM10 and TIM11 can have only update flag, TIM_FLAG_CC1 or TIM_FLAG_CC1OF flags         
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET; 
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]
   
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	8a1b      	ldrh	r3, [r3, #16]
 8000998:	b29a      	uxth	r2, r3
 800099a:	887b      	ldrh	r3, [r7, #2]
 800099c:	4013      	ands	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80009a4:	2301      	movs	r3, #1
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e001      	b.n	80009ae <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <TIM_ClearFlag>:
  * @note TIM10 and TIM11 can have only update flag, TIM_FLAG_CC1
  *     or TIM_FLAG_CC1OF flags      
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	43db      	mvns	r3, r3
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	821a      	strh	r2, [r3, #16]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	81bb      	strh	r3, [r7, #12]
 80009f0:	2300      	movs	r3, #0
 80009f2:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	8a1b      	ldrh	r3, [r3, #16]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	4013      	ands	r3, r2
 80009fe:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	899b      	ldrh	r3, [r3, #12]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000a0c:	89bb      	ldrh	r3, [r7, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d005      	beq.n	8000a1e <TIM_GetITStatus+0x42>
 8000a12:	897b      	ldrh	r3, [r7, #10]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
 8000a1c:	e001      	b.n	8000a22 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000a3c:	887b      	ldrh	r3, [r7, #2]
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	821a      	strh	r2, [r3, #16]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a5c:	887b      	ldrh	r3, [r7, #2]
 8000a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	809a      	strh	r2, [r3, #4]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	807b      	strh	r3, [r7, #2]
 8000a80:	4613      	mov	r3, r2
 8000a82:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a98:	887b      	ldrh	r3, [r7, #2]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	095b      	lsrs	r3, r3, #5
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	f003 031f 	and.w	r3, r3, #31
 8000aa8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d103      	bne.n	8000ac2 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	330c      	adds	r3, #12
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e009      	b.n	8000ad6 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d103      	bne.n	8000ad0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3310      	adds	r3, #16
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	e002      	b.n	8000ad6 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	3314      	adds	r3, #20
 8000ad4:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000ad6:	787b      	ldrb	r3, [r7, #1]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d006      	beq.n	8000aea <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	6811      	ldr	r1, [r2, #0]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000ae8:	e006      	b.n	8000af8 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	6811      	ldr	r1, [r2, #0]
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	43d2      	mvns	r2, r2
 8000af4:	400a      	ands	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
  }
}
 8000af8:	bf00      	nop
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e001      	b.n	8000b2e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <TIM3_IRQHandler>:

	TIM_Cmd(TIM3,ENABLE);
}

void TIM3_IRQHandler()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	if(TIM_GetFlagStatus(TIM3,TIM_FLAG_Update))
 8000b40:	2101      	movs	r1, #1
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <TIM3_IRQHandler+0x24>)
 8000b44:	f7ff ff1e 	bl	8000984 <TIM_GetFlagStatus>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <TIM3_IRQHandler+0x20>
	{
		TIM_Tvz_IRQ_Callback();
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <TIM3_IRQHandler+0x28>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4798      	blx	r3
		TIM_ClearFlag(TIM3,TIM_FLAG_Update);
 8000b54:	2101      	movs	r1, #1
 8000b56:	4802      	ldr	r0, [pc, #8]	; (8000b60 <TIM3_IRQHandler+0x24>)
 8000b58:	f7ff ff30 	bl	80009bc <TIM_ClearFlag>
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40000400 	.word	0x40000400
 8000b64:	20000028 	.word	0x20000028

08000b68 <USART2_IRQHandler>:



void USART2_IRQHandler()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	char character;
	if(USART_GetFlagStatus(USART2,USART_FLAG_TXE))
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <USART2_IRQHandler+0x4c>)
 8000b72:	f7ff ffc7 	bl	8000b04 <USART_GetFlagStatus>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d016      	beq.n	8000baa <USART2_IRQHandler+0x42>
	{
		character=*sensors.TX_Buffer++;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <USART2_IRQHandler+0x50>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <USART2_IRQHandler+0x50>)
 8000b84:	604a      	str	r2, [r1, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	71fb      	strb	r3, [r7, #7]
		if(character) USART_SendData(USART2,character);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <USART2_IRQHandler+0x36>
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	4619      	mov	r1, r3
 8000b96:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <USART2_IRQHandler+0x4c>)
 8000b98:	f7ff ff5a 	bl	8000a50 <USART_SendData>
		else USART_ITConfig(USART2,USART_IT_TXE,DISABLE);
	}
}
 8000b9c:	e005      	b.n	8000baa <USART2_IRQHandler+0x42>
	char character;
	if(USART_GetFlagStatus(USART2,USART_FLAG_TXE))
	{
		character=*sensors.TX_Buffer++;
		if(character) USART_SendData(USART2,character);
		else USART_ITConfig(USART2,USART_IT_TXE,DISABLE);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f240 7127 	movw	r1, #1831	; 0x727
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <USART2_IRQHandler+0x4c>)
 8000ba6:	f7ff ff65 	bl	8000a74 <USART_ITConfig>
	}
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	2000002c 	.word	0x2000002c

08000bbc <ADC_Right_Sensor>:
	USART_ITConfig(USART2,USART_IT_TXE,ENABLE);
}


uint16_t ADC_Right_Sensor()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1,ADC_Channel_0,1,ADC_SampleTime_384Cycles);
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <ADC_Right_Sensor+0x34>)
 8000bc8:	f7ff fad8 	bl	800017c <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv(ADC1);
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <ADC_Right_Sensor+0x34>)
 8000bce:	f7ff fc3b 	bl	8000448 <ADC_SoftwareStartConv>
	while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)==RESET);
 8000bd2:	bf00      	nop
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <ADC_Right_Sensor+0x34>)
 8000bd8:	f7ff fc52 	bl	8000480 <ADC_GetFlagStatus>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f8      	beq.n	8000bd4 <ADC_Right_Sensor+0x18>
	return ADC_GetConversionValue(ADC1);
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <ADC_Right_Sensor+0x34>)
 8000be4:	f7ff fc40 	bl	8000468 <ADC_GetConversionValue>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40012400 	.word	0x40012400

08000bf4 <ADC_Left_Sensor>:


uint16_t ADC_Left_Sensor()
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1,ADC_Channel_1,1,ADC_SampleTime_384Cycles);
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <ADC_Left_Sensor+0x34>)
 8000c00:	f7ff fabc 	bl	800017c <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv(ADC1);
 8000c04:	4808      	ldr	r0, [pc, #32]	; (8000c28 <ADC_Left_Sensor+0x34>)
 8000c06:	f7ff fc1f 	bl	8000448 <ADC_SoftwareStartConv>
	while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)==RESET);
 8000c0a:	bf00      	nop
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <ADC_Left_Sensor+0x34>)
 8000c10:	f7ff fc36 	bl	8000480 <ADC_GetFlagStatus>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f8      	beq.n	8000c0c <ADC_Left_Sensor+0x18>
	return ADC_GetConversionValue(ADC1);
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <ADC_Left_Sensor+0x34>)
 8000c1c:	f7ff fc24 	bl	8000468 <ADC_GetConversionValue>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40012400 	.word	0x40012400

08000c2c <Timer_Tvz_Callback>:
	{
	}
}

void Timer_Tvz_Callback()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	uint16_t AD_value;
	uint16_t AD_value2;

	AD_value=ADC_Right_Sensor();
 8000c32:	f7ff ffc3 	bl	8000bbc <ADC_Right_Sensor>
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
	sensors.Right_Sensor=AD_value;
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <Timer_Tvz_Callback+0x2c>)
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	8013      	strh	r3, [r2, #0]

	AD_value2=ADC_Left_Sensor();
 8000c40:	f7ff ffd8 	bl	8000bf4 <ADC_Left_Sensor>
 8000c44:	4603      	mov	r3, r0
 8000c46:	80bb      	strh	r3, [r7, #4]
    sensors.Left_Sensor=AD_value2;
 8000c48:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <Timer_Tvz_Callback+0x2c>)
 8000c4a:	88bb      	ldrh	r3, [r7, #4]
 8000c4c:	8053      	strh	r3, [r2, #2]
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000002c 	.word	0x2000002c

08000c5c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	da0b      	bge.n	8000c88 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c70:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <NVIC_SetPriority+0x4c>)
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	3b04      	subs	r3, #4
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000c86:	e009      	b.n	8000c9c <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000c88:	4908      	ldr	r1, [pc, #32]	; (8000cac <NVIC_SetPriority+0x50>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbe:	d301      	bcc.n	8000cc4 <SysTick_Config+0x14>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e011      	b.n	8000ce8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000cd0:	210f      	movs	r1, #15
 8000cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd6:	f7ff ffc1 	bl	8000c5c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce2:	2207      	movs	r2, #7
 8000ce4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <Delaypwm>:
//void SysTick_Handler(void){
//	msTicks++;
//}

//Delays number of Systicks (happens every 1ms)
static void Delaypwm(__IO uint32_t dlyTicks){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	uint32_t curTicks = msTicks;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <Delaypwm+0x28>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
	while ((msTicks-curTicks)<dlyTicks);
 8000d02:	bf00      	nop
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <Delaypwm+0x28>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	1ad2      	subs	r2, r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3f8      	bcc.n	8000d04 <Delaypwm+0x10>
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000034 	.word	0x20000034

08000d20 <setSysTick>:
void setSysTick(void){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	if(SysTick_Config(SystemCoreClock / 1000)){
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <setSysTick+0x24>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <setSysTick+0x28>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	099b      	lsrs	r3, r3, #6
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ffbd 	bl	8000cb0 <SysTick_Config>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d000      	beq.n	8000d3e <setSysTick+0x1e>
		while(1){}
 8000d3c:	e7fe      	b.n	8000d3c <setSysTick+0x1c>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000000 	.word	0x20000000
 8000d48:	10624dd3 	.word	0x10624dd3

08000d4c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	; 0x38
 8000d50:	af00      	add	r7, sp, #0
	TIM_Tvz_IRQ_Callback=Timer_Tvz_Callback;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <main+0x4c>)
 8000d54:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <main+0x50>)
 8000d56:	601a      	str	r2, [r3, #0]

//Init_GPIO();
//Init_USART();
//Init_ADC();
//Init_Timer_Tvz();
	setSysTick();
 8000d58:	f7ff ffe2 	bl	8000d20 <setSysTick>
	InitializeGPIO();
 8000d5c:	f000 f88e 	bl	8000e7c <InitializeGPIO>
	InitializeTimer();
 8000d60:	f000 f820 	bl	8000da4 <InitializeTimer>
	InitializePWMChannel();
 8000d64:	f000 f83e 	bl	8000de4 <InitializePWMChannel>
	InitializePWMChannel2();
 8000d68:	f000 f862 	bl	8000e30 <InitializePWMChannel2>
				//Delay(500000);




						TIM4->CCR1 = 1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <main+0x54>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
						TIM4->CCR3 = 1;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <main+0x54>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
						Delaypwm(700);
 8000d78:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000d7c:	f7ff ffba 	bl	8000cf4 <Delaypwm>
						TIM4->CCR1 = 0;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <main+0x54>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
						TIM4->CCR3 = 0;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <main+0x54>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	63da      	str	r2, [r3, #60]	; 0x3c
						Delaypwm(700);
 8000d8c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000d90:	f7ff ffb0 	bl	8000cf4 <Delaypwm>
						//TIM4->CCR3 = 90;




			}
 8000d94:	e7ea      	b.n	8000d6c <main+0x20>
 8000d96:	bf00      	nop
 8000d98:	20000028 	.word	0x20000028
 8000d9c:	08000c2d 	.word	0x08000c2d
 8000da0:	40000800 	.word	0x40000800

08000da4 <InitializeTimer>:
#include <string.h>
#include <pwm.h>
#include <stdlib.h>

void InitializeTimer()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000daa:	2101      	movs	r1, #1
 8000dac:	2004      	movs	r0, #4
 8000dae:	f7ff fc7d 	bl	80006ac <RCC_APB1PeriphClockCmd>

    TIM_TimeBaseInitTypeDef timerInitStructure;
    timerInitStructure.TIM_Prescaler = 16-1;
 8000db2:	230f      	movs	r3, #15
 8000db4:	80bb      	strh	r3, [r7, #4]
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000db6:	2300      	movs	r3, #0
 8000db8:	80fb      	strh	r3, [r7, #6]
    timerInitStructure.TIM_Period = 20000-1;
 8000dba:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000dbe:	60bb      	str	r3, [r7, #8]
    timerInitStructure.TIM_ClockDivision = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM4, &timerInitStructure);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <InitializeTimer+0x3c>)
 8000dca:	f7ff fc8d 	bl	80006e8 <TIM_TimeBaseInit>
    TIM_Cmd(TIM4, ENABLE);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <InitializeTimer+0x3c>)
 8000dd2:	f7ff fcfb 	bl	80007cc <TIM_Cmd>
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40000800 	.word	0x40000800

08000de4 <InitializePWMChannel>:

void InitializePWMChannel()
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
    TIM_OCInitTypeDef outputChannelInit ;
    outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8000dea:	2360      	movs	r3, #96	; 0x60
 8000dec:	80bb      	strh	r3, [r7, #4]
    outputChannelInit.TIM_Pulse = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
    outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 8000df2:	2301      	movs	r3, #1
 8000df4:	80fb      	strh	r3, [r7, #6]
    outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
 8000df6:	2300      	movs	r3, #0
 8000df8:	81bb      	strh	r3, [r7, #12]

    TIM_OC1Init(TIM4, &outputChannelInit);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <InitializePWMChannel+0x44>)
 8000e00:	f7ff fd04 	bl	800080c <TIM_OC1Init>
    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000e04:	2108      	movs	r1, #8
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <InitializePWMChannel+0x44>)
 8000e08:	f7ff fd84 	bl	8000914 <TIM_OC1PreloadConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_TIM4);
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	2106      	movs	r1, #6
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <InitializePWMChannel+0x48>)
 8000e12:	f7ff fbe5 	bl	80005e0 <GPIO_PinAFConfig>
    TIM_ARRPreloadConfig(TIM4,ENABLE);
 8000e16:	2101      	movs	r1, #1
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <InitializePWMChannel+0x44>)
 8000e1a:	f7ff fcb7 	bl	800078c <TIM_ARRPreloadConfig>
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40000800 	.word	0x40000800
 8000e2c:	40020400 	.word	0x40020400

08000e30 <InitializePWMChannel2>:

void InitializePWMChannel2()
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
    TIM_OCInitTypeDef outputChannelInit ;
    outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8000e36:	2360      	movs	r3, #96	; 0x60
 8000e38:	80bb      	strh	r3, [r7, #4]
    outputChannelInit.TIM_Pulse = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
    outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	80fb      	strh	r3, [r7, #6]
    outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
 8000e42:	2300      	movs	r3, #0
 8000e44:	81bb      	strh	r3, [r7, #12]

    TIM_OC3Init(TIM4, &outputChannelInit);
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480a      	ldr	r0, [pc, #40]	; (8000e74 <InitializePWMChannel2+0x44>)
 8000e4c:	f7ff fd20 	bl	8000890 <TIM_OC3Init>
    TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000e50:	2108      	movs	r1, #8
 8000e52:	4808      	ldr	r0, [pc, #32]	; (8000e74 <InitializePWMChannel2+0x44>)
 8000e54:	f7ff fd7a 	bl	800094c <TIM_OC3PreloadConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_TIM4);
 8000e58:	2202      	movs	r2, #2
 8000e5a:	2108      	movs	r1, #8
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <InitializePWMChannel2+0x48>)
 8000e5e:	f7ff fbbf 	bl	80005e0 <GPIO_PinAFConfig>
    TIM_ARRPreloadConfig(TIM4,ENABLE);
 8000e62:	2101      	movs	r1, #1
 8000e64:	4803      	ldr	r0, [pc, #12]	; (8000e74 <InitializePWMChannel2+0x44>)
 8000e66:	f7ff fc91 	bl	800078c <TIM_ARRPreloadConfig>
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40000800 	.word	0x40000800
 8000e78:	40020400 	.word	0x40020400

08000e7c <InitializeGPIO>:

void InitializeGPIO()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000e82:	2101      	movs	r1, #1
 8000e84:	2002      	movs	r0, #2
 8000e86:	f7ff fbf3 	bl	8000670 <RCC_AHBPeriphClockCmd>

    GPIO_InitTypeDef gpioStructure;
    gpioStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_8;
 8000e8a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e8e:	603b      	str	r3, [r7, #0]
    gpioStructure.GPIO_Mode = GPIO_Mode_AF;
 8000e90:	2302      	movs	r3, #2
 8000e92:	713b      	strb	r3, [r7, #4]
    gpioStructure.GPIO_OType = GPIO_OType_PP;
 8000e94:	2300      	movs	r3, #0
 8000e96:	71bb      	strb	r3, [r7, #6]
    gpioStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOB, &gpioStructure);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <InitializeGPIO+0x38>)
 8000ea6:	f7ff fb05 	bl	80004b4 <GPIO_Init>

}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40020400 	.word	0x40020400

08000eb8 <TIM2_IRQHandler>:
{
	TIM9->CCR1 = gDutyCycleOut = value;
}

void TIM2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_CC2) == SET)
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ec2:	f7ff fd8b 	bl	80009dc <TIM_GetITStatus>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d11e      	bne.n	8000f0a <TIM2_IRQHandler+0x52>
	{
		/* Clear TIM3 Capture compare interrupt pending bit */
		/* Get the Input Capture value */
		gIC2Value = TIM2->CCR2;
 8000ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <TIM2_IRQHandler+0x84>)
 8000ed6:	801a      	strh	r2, [r3, #0]

		/* Duty cycle computation */
		gDutyCycleIn = TIM2->CCR1;
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <TIM2_IRQHandler+0x88>)
 8000ee2:	801a      	strh	r2, [r3, #0]

		/* Frequency computation */
		gFrequency = 1000000 / gIC2Value;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <TIM2_IRQHandler+0x84>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <TIM2_IRQHandler+0x8c>)
 8000eec:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <TIM2_IRQHandler+0x90>)
 8000ef4:	801a      	strh	r2, [r3, #0]

		TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000efc:	f7ff fd98 	bl	8000a30 <TIM_ClearITPendingBit>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000f00:	2101      	movs	r1, #1
 8000f02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f06:	f7ff fd93 	bl	8000a30 <TIM_ClearITPendingBit>
	}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f10:	f7ff fd64 	bl	80009dc <TIM_GetITStatus>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10e      	bne.n	8000f38 <TIM2_IRQHandler+0x80>
	{
		gDutyCycleIn = gDutyCycleOut = 0;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <TIM2_IRQHandler+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	801a      	strh	r2, [r3, #0]
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <TIM2_IRQHandler+0x94>)
 8000f22:	881a      	ldrh	r2, [r3, #0]
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <TIM2_IRQHandler+0x88>)
 8000f26:	801a      	strh	r2, [r3, #0]
		gFrequency = 0;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <TIM2_IRQHandler+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	801a      	strh	r2, [r3, #0]

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f34:	f7ff fd7c 	bl	8000a30 <TIM_ClearITPendingBit>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000020 	.word	0x20000020
 8000f40:	20000022 	.word	0x20000022
 8000f44:	000f4240 	.word	0x000f4240
 8000f48:	20000026 	.word	0x20000026
 8000f4c:	20000024 	.word	0x20000024

08000f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f56:	e003      	b.n	8000f60 <LoopCopyDataInit>

08000f58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000f5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f5e:	3104      	adds	r1, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000f64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f68:	d3f6      	bcc.n	8000f58 <CopyDataInit>
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000f6c:	e002      	b.n	8000f74 <LoopFillZerobss>

08000f6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f70:	f842 3b04 	str.w	r3, [r2], #4

08000f74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000f76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f78:	d3f9      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f7a:	f000 f849 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f000 f90b 	bl	8001198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f82:	f7ff fee3 	bl	8000d4c <main>
  bx lr
 8000f86:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f88:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000f8c:	08001204 	.word	0x08001204
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f94:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000f98:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000f9c:	20000038 	.word	0x20000038

08000fa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_IRQHandler>
	...

08000fa4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000fb4:	e7fe      	b.n	8000fb4 <HardFault_Handler+0x4>
 8000fb6:	bf00      	nop

08000fb8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>
 8000fbe:	bf00      	nop

08000fc0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000fc4:	e7fe      	b.n	8000fc4 <BusFault_Handler+0x4>
 8000fc6:	bf00      	nop

08000fc8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>
 8000fce:	bf00      	nop

08000fd0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
volatile uint32_t msTicks;
void SysTick_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	msTicks++;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Handler+0x18>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a03      	ldr	r2, [pc, #12]	; (800100c <SysTick_Handler+0x18>)
 8001000:	6013      	str	r3, [r2, #0]
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000034 	.word	0x20000034

08001010 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001014:	4a15      	ldr	r2, [pc, #84]	; (800106c <SystemInit+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <SystemInit+0x5c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001020:	4912      	ldr	r1, [pc, #72]	; (800106c <SystemInit+0x5c>)
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <SystemInit+0x5c>)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <SystemInit+0x60>)
 8001028:	4013      	ands	r3, r2
 800102a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <SystemInit+0x5c>)
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <SystemInit+0x5c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001036:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800103a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <SystemInit+0x5c>)
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <SystemInit+0x5c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <SystemInit+0x5c>)
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <SystemInit+0x5c>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001052:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SystemInit+0x5c>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800105a:	f000 f80d 	bl	8001078 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SystemInit+0x64>)
 8001060:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001064:	609a      	str	r2, [r3, #8]
#endif
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	88ffc00c 	.word	0x88ffc00c
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001086:	4a41      	ldr	r2, [pc, #260]	; (800118c <SetSysClock+0x114>)
 8001088:	4b40      	ldr	r3, [pc, #256]	; (800118c <SetSysClock+0x114>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001092:	4b3e      	ldr	r3, [pc, #248]	; (800118c <SetSysClock+0x114>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3301      	adds	r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <SetSysClock+0x38>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80010ae:	d1f0      	bne.n	8001092 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <SetSysClock+0x114>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80010bc:	2301      	movs	r3, #1
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	e001      	b.n	80010c6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d15a      	bne.n	8001182 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 80010cc:	4a30      	ldr	r2, [pc, #192]	; (8001190 <SetSysClock+0x118>)
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <SetSysClock+0x118>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80010d8:	4a2d      	ldr	r2, [pc, #180]	; (8001190 <SetSysClock+0x118>)
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <SetSysClock+0x118>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80010e4:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <SetSysClock+0x118>)
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <SetSysClock+0x118>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80010f0:	4a26      	ldr	r2, [pc, #152]	; (800118c <SetSysClock+0x114>)
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <SetSysClock+0x114>)
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fa:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80010fc:	4b25      	ldr	r3, [pc, #148]	; (8001194 <SetSysClock+0x11c>)
 80010fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001102:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001104:	bf00      	nop
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <SetSysClock+0x11c>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f9      	bne.n	8001106 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <SetSysClock+0x114>)
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <SetSysClock+0x114>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <SetSysClock+0x114>)
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <SetSysClock+0x114>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001122:	4a1a      	ldr	r2, [pc, #104]	; (800118c <SetSysClock+0x114>)
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <SetSysClock+0x114>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <SetSysClock+0x114>)
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <SetSysClock+0x114>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001134:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001136:	4a15      	ldr	r2, [pc, #84]	; (800118c <SetSysClock+0x114>)
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <SetSysClock+0x114>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001140:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <SetSysClock+0x114>)
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <SetSysClock+0x114>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800114c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800114e:	bf00      	nop
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <SetSysClock+0x114>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f9      	beq.n	8001150 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800115c:	4a0b      	ldr	r2, [pc, #44]	; (800118c <SetSysClock+0x114>)
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <SetSysClock+0x114>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001168:	4a08      	ldr	r2, [pc, #32]	; (800118c <SetSysClock+0x114>)
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <SetSysClock+0x114>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f043 0303 	orr.w	r3, r3, #3
 8001172:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001174:	bf00      	nop
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <SetSysClock+0x114>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b0c      	cmp	r3, #12
 8001180:	d1f9      	bne.n	8001176 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	40023800 	.word	0x40023800
 8001190:	40023c00 	.word	0x40023c00
 8001194:	40007000 	.word	0x40007000

08001198 <__libc_init_array>:
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <__libc_init_array+0x3c>)
 800119a:	b570      	push	{r4, r5, r6, lr}
 800119c:	461e      	mov	r6, r3
 800119e:	4c0e      	ldr	r4, [pc, #56]	; (80011d8 <__libc_init_array+0x40>)
 80011a0:	2500      	movs	r5, #0
 80011a2:	1ae4      	subs	r4, r4, r3
 80011a4:	10a4      	asrs	r4, r4, #2
 80011a6:	42a5      	cmp	r5, r4
 80011a8:	d004      	beq.n	80011b4 <__libc_init_array+0x1c>
 80011aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ae:	4798      	blx	r3
 80011b0:	3501      	adds	r5, #1
 80011b2:	e7f8      	b.n	80011a6 <__libc_init_array+0xe>
 80011b4:	f000 f816 	bl	80011e4 <_init>
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <__libc_init_array+0x44>)
 80011ba:	4c09      	ldr	r4, [pc, #36]	; (80011e0 <__libc_init_array+0x48>)
 80011bc:	461e      	mov	r6, r3
 80011be:	1ae4      	subs	r4, r4, r3
 80011c0:	10a4      	asrs	r4, r4, #2
 80011c2:	2500      	movs	r5, #0
 80011c4:	42a5      	cmp	r5, r4
 80011c6:	d004      	beq.n	80011d2 <__libc_init_array+0x3a>
 80011c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011cc:	4798      	blx	r3
 80011ce:	3501      	adds	r5, #1
 80011d0:	e7f8      	b.n	80011c4 <__libc_init_array+0x2c>
 80011d2:	bd70      	pop	{r4, r5, r6, pc}
 80011d4:	080011fc 	.word	0x080011fc
 80011d8:	080011fc 	.word	0x080011fc
 80011dc:	080011fc 	.word	0x080011fc
 80011e0:	08001200 	.word	0x08001200

080011e4 <_init>:
 80011e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e6:	bf00      	nop
 80011e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ea:	bc08      	pop	{r3}
 80011ec:	469e      	mov	lr, r3
 80011ee:	4770      	bx	lr

080011f0 <_fini>:
 80011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f2:	bf00      	nop
 80011f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011f6:	bc08      	pop	{r3}
 80011f8:	469e      	mov	lr, r3
 80011fa:	4770      	bx	lr
