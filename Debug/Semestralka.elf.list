
Semestralka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c68  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001db4  08001db4  00011db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001db8  08001db8  00011db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08001dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  20000020  08001ddc  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000054  08001ddc  00020054  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007d32  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001409  00000000  00000000  00027d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000958  00000000  00000000  00029188  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  00029ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000301e  00000000  00000000  0002a360  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002d22  00000000  00000000  0002d37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000027c0  00000000  00000000  00030120  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000328e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	08001d8c 	.word	0x08001d8c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	08001d8c 	.word	0x08001d8c

0800017c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000184:	4a05      	ldr	r2, [pc, #20]	; (800019c <NVIC_PriorityGroupConfig+0x20>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800018c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000190:	60d3      	str	r3, [r2, #12]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000ed00 	.word	0xe000ed00

080001a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
 80001ac:	2300      	movs	r3, #0
 80001ae:	73bb      	strb	r3, [r7, #14]
 80001b0:	230f      	movs	r3, #15
 80001b2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	78db      	ldrb	r3, [r3, #3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d038      	beq.n	800022e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001bc:	4b26      	ldr	r3, [pc, #152]	; (8000258 <NVIC_Init+0xb8>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	43db      	mvns	r3, r3
 80001c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001c6:	0a1b      	lsrs	r3, r3, #8
 80001c8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f1c3 0304 	rsb	r3, r3, #4
 80001d0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001d2:	7b7a      	ldrb	r2, [r7, #13]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	fa42 f303 	asr.w	r3, r2, r3
 80001da:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	461a      	mov	r2, r3
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	fa02 f303 	lsl.w	r3, r2, r3
 80001e8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	789a      	ldrb	r2, [r3, #2]
 80001ee:	7b7b      	ldrb	r3, [r7, #13]
 80001f0:	4013      	ands	r3, r2
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	4313      	orrs	r3, r2
 80001f8:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	011b      	lsls	r3, r3, #4
 80001fe:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000200:	4a16      	ldr	r2, [pc, #88]	; (800025c <NVIC_Init+0xbc>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4413      	add	r3, r2
 8000208:	7bfa      	ldrb	r2, [r7, #15]
 800020a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <NVIC_Init+0xbc>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	b2db      	uxtb	r3, r3
 8000218:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	f003 031f 	and.w	r3, r3, #31
 8000222:	2101      	movs	r1, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000228:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022c:	e00f      	b.n	800024e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800022e:	490b      	ldr	r1, [pc, #44]	; (800025c <NVIC_Init+0xbc>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	095b      	lsrs	r3, r3, #5
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	f003 031f 	and.w	r3, r3, #31
 8000242:	2201      	movs	r2, #1
 8000244:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000246:	f100 0320 	add.w	r3, r0, #32
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000e100 	.word	0xe000e100

08000260 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800027e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000282:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	791b      	ldrb	r3, [r3, #4]
 8000288:	021a      	lsls	r2, r3, #8
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4313      	orrs	r3, r2
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	4313      	orrs	r3, r2
 8000294:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <ADC_Init+0xa4>)
 80002a6:	4013      	ands	r3, r2
 80002a8:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	691a      	ldr	r2, [r3, #16]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80002b8:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	795b      	ldrb	r3, [r3, #5]
 80002be:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80002c0:	4313      	orrs	r3, r2
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4313      	orrs	r3, r2
 80002c6:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 80002da:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	7d1b      	ldrb	r3, [r3, #20]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	7afb      	ldrb	r3, [r7, #11]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80002ea:	7afb      	ldrb	r3, [r7, #11]
 80002ec:	051b      	lsls	r3, r3, #20
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	c0fff7fd 	.word	0xc0fff7fd

08000308 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800032e:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2201      	movs	r2, #1
 800033a:	751a      	strb	r2, [r3, #20]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop

08000348 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	460b      	mov	r3, r1
 8000352:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000354:	78fb      	ldrb	r3, [r7, #3]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d006      	beq.n	8000368 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	f043 0201 	orr.w	r2, r3, #1
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000366:	e005      	b.n	8000374 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f023 0201 	bic.w	r2, r3, #1
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	609a      	str	r2, [r3, #8]
  }
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	4608      	mov	r0, r1
 800038a:	4611      	mov	r1, r2
 800038c:	461a      	mov	r2, r3
 800038e:	4603      	mov	r3, r0
 8000390:	70fb      	strb	r3, [r7, #3]
 8000392:	460b      	mov	r3, r1
 8000394:	70bb      	strb	r3, [r7, #2]
 8000396:	4613      	mov	r3, r2
 8000398:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	2300      	movs	r3, #0
 80003a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	2b1d      	cmp	r3, #29
 80003a6:	d923      	bls.n	80003f0 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80003ac:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	f1a3 021e 	sub.w	r2, r3, #30
 80003b4:	4613      	mov	r3, r2
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	4413      	add	r3, r2
 80003ba:	2207      	movs	r2, #7
 80003bc:	fa02 f303 	lsl.w	r3, r2, r3
 80003c0:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	43db      	mvns	r3, r3
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	4013      	ands	r3, r2
 80003ca:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 80003cc:	7879      	ldrb	r1, [r7, #1]
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	f1a3 021e 	sub.w	r2, r3, #30
 80003d4:	4613      	mov	r3, r2
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	4413      	add	r3, r2
 80003da:	fa01 f303 	lsl.w	r3, r1, r3
 80003de:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80003ee:	e06c      	b.n	80004ca <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	2b13      	cmp	r3, #19
 80003f4:	d923      	bls.n	800043e <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 80003fc:	78fb      	ldrb	r3, [r7, #3]
 80003fe:	f1a3 0214 	sub.w	r2, r3, #20
 8000402:	4613      	mov	r3, r2
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	4413      	add	r3, r2
 8000408:	2207      	movs	r2, #7
 800040a:	fa02 f303 	lsl.w	r3, r2, r3
 800040e:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	43db      	mvns	r3, r3
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	4013      	ands	r3, r2
 8000418:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 800041a:	7879      	ldrb	r1, [r7, #1]
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	f1a3 0214 	sub.w	r2, r3, #20
 8000422:	4613      	mov	r3, r2
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	4413      	add	r3, r2
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	4313      	orrs	r3, r2
 8000434:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	e045      	b.n	80004ca <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 800043e:	78fb      	ldrb	r3, [r7, #3]
 8000440:	2b09      	cmp	r3, #9
 8000442:	d923      	bls.n	800048c <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	691b      	ldr	r3, [r3, #16]
 8000448:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 800044a:	78fb      	ldrb	r3, [r7, #3]
 800044c:	f1a3 020a 	sub.w	r2, r3, #10
 8000450:	4613      	mov	r3, r2
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	4413      	add	r3, r2
 8000456:	2207      	movs	r2, #7
 8000458:	fa02 f303 	lsl.w	r3, r2, r3
 800045c:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	43db      	mvns	r3, r3
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	4013      	ands	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000468:	7879      	ldrb	r1, [r7, #1]
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	f1a3 020a 	sub.w	r2, r3, #10
 8000470:	4613      	mov	r3, r2
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	4413      	add	r3, r2
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	4313      	orrs	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	611a      	str	r2, [r3, #16]
 800048a:	e01e      	b.n	80004ca <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8000492:	78fa      	ldrb	r2, [r7, #3]
 8000494:	4613      	mov	r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	2207      	movs	r2, #7
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	43db      	mvns	r3, r3
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	4013      	ands	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80004ac:	7879      	ldrb	r1, [r7, #1]
 80004ae:	78fa      	ldrb	r2, [r7, #3]
 80004b0:	4613      	mov	r3, r2
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4413      	add	r3, r2
 80004b6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ba:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80004ca:	78bb      	ldrb	r3, [r7, #2]
 80004cc:	2b06      	cmp	r3, #6
 80004ce:	d821      	bhi.n	8000514 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 80004d6:	78bb      	ldrb	r3, [r7, #2]
 80004d8:	1e5a      	subs	r2, r3, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4413      	add	r3, r2
 80004e0:	221f      	movs	r2, #31
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	43db      	mvns	r3, r3
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	4013      	ands	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80004f2:	78f9      	ldrb	r1, [r7, #3]
 80004f4:	78bb      	ldrb	r3, [r7, #2]
 80004f6:	1e5a      	subs	r2, r3, #1
 80004f8:	4613      	mov	r3, r2
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4313      	orrs	r3, r2
 800050a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000512:	e095      	b.n	8000640 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000514:	78bb      	ldrb	r3, [r7, #2]
 8000516:	2b0c      	cmp	r3, #12
 8000518:	d821      	bhi.n	800055e <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800051e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8000520:	78bb      	ldrb	r3, [r7, #2]
 8000522:	1fda      	subs	r2, r3, #7
 8000524:	4613      	mov	r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	221f      	movs	r2, #31
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	43db      	mvns	r3, r3
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	4013      	ands	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800053c:	78f9      	ldrb	r1, [r7, #3]
 800053e:	78bb      	ldrb	r3, [r7, #2]
 8000540:	1fda      	subs	r2, r3, #7
 8000542:	4613      	mov	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
 800054c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4313      	orrs	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800055c:	e070      	b.n	8000640 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 800055e:	78bb      	ldrb	r3, [r7, #2]
 8000560:	2b12      	cmp	r3, #18
 8000562:	d823      	bhi.n	80005ac <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000568:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 800056a:	78bb      	ldrb	r3, [r7, #2]
 800056c:	f1a3 020d 	sub.w	r2, r3, #13
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	221f      	movs	r2, #31
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	43db      	mvns	r3, r3
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	4013      	ands	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000588:	78f9      	ldrb	r1, [r7, #3]
 800058a:	78bb      	ldrb	r3, [r7, #2]
 800058c:	f1a3 020d 	sub.w	r2, r3, #13
 8000590:	4613      	mov	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	fa01 f303 	lsl.w	r3, r1, r3
 800059a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80005aa:	e049      	b.n	8000640 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 80005ac:	78bb      	ldrb	r3, [r7, #2]
 80005ae:	2b18      	cmp	r3, #24
 80005b0:	d823      	bhi.n	80005fa <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 80005b8:	78bb      	ldrb	r3, [r7, #2]
 80005ba:	f1a3 0213 	sub.w	r2, r3, #19
 80005be:	4613      	mov	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	221f      	movs	r2, #31
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	43db      	mvns	r3, r3
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 80005d6:	78f9      	ldrb	r1, [r7, #3]
 80005d8:	78bb      	ldrb	r3, [r7, #2]
 80005da:	f1a3 0213 	sub.w	r2, r3, #19
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80005f8:	e022      	b.n	8000640 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000600:	78bb      	ldrb	r3, [r7, #2]
 8000602:	f1a3 0219 	sub.w	r2, r3, #25
 8000606:	4613      	mov	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	221f      	movs	r2, #31
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	43db      	mvns	r3, r3
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4013      	ands	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 800061e:	78f9      	ldrb	r1, [r7, #3]
 8000620:	78bb      	ldrb	r3, [r7, #2]
 8000622:	f1a3 0219 	sub.w	r2, r3, #25
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	fa01 f303 	lsl.w	r3, r1, r3
 8000630:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4313      	orrs	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	609a      	str	r2, [r3, #8]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000678:	b29b      	uxth	r3, r3
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	4013      	ands	r3, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80006a0:	2301      	movs	r3, #1
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e001      	b.n	80006aa <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	e07e      	b.n	80007d2 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006d4:	2201      	movs	r2, #1
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	4013      	ands	r3, r2
 80006e6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d16d      	bne.n	80007cc <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	2103      	movs	r1, #3
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	401a      	ands	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	4619      	mov	r1, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	fa01 f303 	lsl.w	r3, r1, r3
 8000718:	431a      	orrs	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d003      	beq.n	800072e <GPIO_Init+0x76>
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d136      	bne.n	800079c <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	2103      	movs	r1, #3
 8000738:	fa01 f303 	lsl.w	r3, r1, r3
 800073c:	43db      	mvns	r3, r3
 800073e:	401a      	ands	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	795b      	ldrb	r3, [r3, #5]
 800074c:	4619      	mov	r1, r3
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	889b      	ldrh	r3, [r3, #4]
 8000760:	b29a      	uxth	r2, r3
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	b29b      	uxth	r3, r3
 8000766:	2101      	movs	r1, #1
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	b29b      	uxth	r3, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	b29b      	uxth	r3, r3
 8000772:	4013      	ands	r3, r2
 8000774:	b29a      	uxth	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	889b      	ldrh	r3, [r3, #4]
 800077e:	b29b      	uxth	r3, r3
 8000780:	b21a      	sxth	r2, r3
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	799b      	ldrb	r3, [r3, #6]
 8000786:	4619      	mov	r1, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	b29b      	uxth	r3, r3
 800078c:	fa01 f303 	lsl.w	r3, r1, r3
 8000790:	b21b      	sxth	r3, r3
 8000792:	4313      	orrs	r3, r2
 8000794:	b21b      	sxth	r3, r3
 8000796:	b29a      	uxth	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68da      	ldr	r2, [r3, #12]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	2103      	movs	r1, #3
 80007a8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ac:	43db      	mvns	r3, r3
 80007ae:	401a      	ands	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68da      	ldr	r2, [r3, #12]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	79db      	ldrb	r3, [r3, #7]
 80007bc:	4619      	mov	r1, r3
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	431a      	orrs	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	3301      	adds	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	f67f af7d 	bls.w	80006d4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80007da:	bf00      	nop
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_400KHz;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	71da      	strb	r2, [r3, #7]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	807b      	strh	r3, [r7, #2]
 8000824:	4613      	mov	r3, r2
 8000826:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000830:	787a      	ldrb	r2, [r7, #1]
 8000832:	887b      	ldrh	r3, [r7, #2]
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	b29b      	uxth	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	b29b      	uxth	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3208      	adds	r2, #8
 8000854:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000858:	887b      	ldrh	r3, [r7, #2]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	210f      	movs	r1, #15
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	ea02 0103 	and.w	r1, r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f100 0208 	add.w	r2, r0, #8
 8000872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000876:	887b      	ldrh	r3, [r7, #2]
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	b29b      	uxth	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3208      	adds	r2, #8
 8000882:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	4313      	orrs	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	b29b      	uxth	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3208      	adds	r2, #8
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <RCC_HSICmd+0x1c>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	42470000 	.word	0x42470000

080008c8 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008e8:	4b5f      	ldr	r3, [pc, #380]	; (8000a68 <RCC_GetClocksFreq+0x1a0>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f003 030c 	and.w	r3, r3, #12
 80008f0:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	2b0c      	cmp	r3, #12
 80008f6:	d865      	bhi.n	80009c4 <RCC_GetClocksFreq+0xfc>
 80008f8:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <RCC_GetClocksFreq+0x38>)
 80008fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fe:	bf00      	nop
 8000900:	08000935 	.word	0x08000935
 8000904:	080009c5 	.word	0x080009c5
 8000908:	080009c5 	.word	0x080009c5
 800090c:	080009c5 	.word	0x080009c5
 8000910:	08000955 	.word	0x08000955
 8000914:	080009c5 	.word	0x080009c5
 8000918:	080009c5 	.word	0x080009c5
 800091c:	080009c5 	.word	0x080009c5
 8000920:	0800095d 	.word	0x0800095d
 8000924:	080009c5 	.word	0x080009c5
 8000928:	080009c5 	.word	0x080009c5
 800092c:	080009c5 	.word	0x080009c5
 8000930:	08000965 	.word	0x08000965
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000934:	4b4c      	ldr	r3, [pc, #304]	; (8000a68 <RCC_GetClocksFreq+0x1a0>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800093c:	0b5b      	lsrs	r3, r3, #13
 800093e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	3301      	adds	r3, #1
 8000944:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
      break;
 8000952:	e047      	b.n	80009e4 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a45      	ldr	r2, [pc, #276]	; (8000a6c <RCC_GetClocksFreq+0x1a4>)
 8000958:	601a      	str	r2, [r3, #0]
      break;
 800095a:	e043      	b.n	80009e4 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a44      	ldr	r2, [pc, #272]	; (8000a70 <RCC_GetClocksFreq+0x1a8>)
 8000960:	601a      	str	r2, [r3, #0]
      break;
 8000962:	e03f      	b.n	80009e4 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000964:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <RCC_GetClocksFreq+0x1a0>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800096c:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800096e:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <RCC_GetClocksFreq+0x1a0>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000976:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	0c9b      	lsrs	r3, r3, #18
 800097c:	4a3d      	ldr	r2, [pc, #244]	; (8000a74 <RCC_GetClocksFreq+0x1ac>)
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	0d9b      	lsrs	r3, r3, #22
 8000988:	3301      	adds	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800098c:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <RCC_GetClocksFreq+0x1a0>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000994:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d109      	bne.n	80009b0 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <RCC_GetClocksFreq+0x1a4>)
 80009a0:	fb02 f203 	mul.w	r2, r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80009ae:	e019      	b.n	80009e4 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <RCC_GetClocksFreq+0x1a8>)
 80009b4:	fb02 f203 	mul.w	r2, r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
      }
      break;
 80009c2:	e00f      	b.n	80009e4 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80009c4:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <RCC_GetClocksFreq+0x1a0>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80009cc:	0b5b      	lsrs	r3, r3, #13
 80009ce:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	3301      	adds	r3, #1
 80009d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
      break;
 80009e2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009e4:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <RCC_GetClocksFreq+0x1a0>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009ec:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	091b      	lsrs	r3, r3, #4
 80009f2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 80009f4:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <RCC_GetClocksFreq+0x1b0>)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	4413      	add	r3, r2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	40da      	lsrs	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <RCC_GetClocksFreq+0x1a0>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a14:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <RCC_GetClocksFreq+0x1b0>)
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	40da      	lsrs	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <RCC_GetClocksFreq+0x1a0>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000a3c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	0adb      	lsrs	r3, r3, #11
 8000a42:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000a44:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <RCC_GetClocksFreq+0x1b0>)
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	40da      	lsrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	60da      	str	r2, [r3, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3724      	adds	r7, #36	; 0x24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	00f42400 	.word	0x00f42400
 8000a70:	007a1200 	.word	0x007a1200
 8000a74:	20000000 	.word	0x20000000
 8000a78:	2000000c 	.word	0x2000000c

08000a7c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000a8e:	4909      	ldr	r1, [pc, #36]	; (8000ab4 <RCC_AHBPeriphClockCmd+0x38>)
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <RCC_AHBPeriphClockCmd+0x38>)
 8000a92:	69da      	ldr	r2, [r3, #28]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000a9a:	e006      	b.n	8000aaa <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000a9c:	4905      	ldr	r1, [pc, #20]	; (8000ab4 <RCC_AHBPeriphClockCmd+0x38>)
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <RCC_AHBPeriphClockCmd+0x38>)
 8000aa0:	69da      	ldr	r2, [r3, #28]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61cb      	str	r3, [r1, #28]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d006      	beq.n	8000ad8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000aca:	4909      	ldr	r1, [pc, #36]	; (8000af0 <RCC_APB2PeriphClockCmd+0x38>)
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <RCC_APB2PeriphClockCmd+0x38>)
 8000ace:	6a1a      	ldr	r2, [r3, #32]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000ad6:	e006      	b.n	8000ae6 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ad8:	4905      	ldr	r1, [pc, #20]	; (8000af0 <RCC_APB2PeriphClockCmd+0x38>)
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <RCC_APB2PeriphClockCmd+0x38>)
 8000adc:	6a1a      	ldr	r2, [r3, #32]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	620b      	str	r3, [r1, #32]
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40023800 	.word	0x40023800

08000af4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b06:	4909      	ldr	r1, [pc, #36]	; (8000b2c <RCC_APB1PeriphClockCmd+0x38>)
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <RCC_APB1PeriphClockCmd+0x38>)
 8000b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000b12:	e006      	b.n	8000b22 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b14:	4905      	ldr	r1, [pc, #20]	; (8000b2c <RCC_APB1PeriphClockCmd+0x38>)
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <RCC_APB1PeriphClockCmd+0x38>)
 8000b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4013      	ands	r3, r2
 8000b20:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40023800 	.word	0x40023800

08000b30 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	095b      	lsrs	r3, r3, #5
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d103      	bne.n	8000b5c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <RCC_GetFlagStatus+0x60>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e002      	b.n	8000b62 <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <RCC_GetFlagStatus+0x60>)
 8000b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b60:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 031f 	and.w	r3, r3, #31
 8000b68:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	74fb      	strb	r3, [r7, #19]
 8000b7e:	e001      	b.n	8000b84 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000b84:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	371c      	adds	r7, #28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	40023800 	.word	0x40023800

08000b94 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bae:	d00b      	beq.n	8000bc8 <TIM_TimeBaseInit+0x34>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <TIM_TimeBaseInit+0x90>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d007      	beq.n	8000bc8 <TIM_TimeBaseInit+0x34>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <TIM_TimeBaseInit+0x94>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d003      	beq.n	8000bc8 <TIM_TimeBaseInit+0x34>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a1a      	ldr	r2, [pc, #104]	; (8000c2c <TIM_TimeBaseInit+0x98>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d108      	bne.n	8000bda <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000bc8:	89fb      	ldrh	r3, [r7, #14]
 8000bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bce:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	885a      	ldrh	r2, [r3, #2]
 8000bd4:	89fb      	ldrh	r3, [r7, #14]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <TIM_TimeBaseInit+0x9c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d00c      	beq.n	8000bfc <TIM_TimeBaseInit+0x68>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <TIM_TimeBaseInit+0xa0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d008      	beq.n	8000bfc <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bf0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	891a      	ldrh	r2, [r3, #8]
 8000bf6:	89fb      	ldrh	r3, [r7, #14]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	89fa      	ldrh	r2, [r7, #14]
 8000c00:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2201      	movs	r2, #1
 8000c16:	829a      	strh	r2, [r3, #20]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40000400 	.word	0x40000400
 8000c28:	40000800 	.word	0x40000800
 8000c2c:	40000c00 	.word	0x40000c00
 8000c30:	40001000 	.word	0x40001000
 8000c34:	40001400 	.word	0x40001400

08000c38 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f04f 32ff 	mov.w	r2, #4294967295
 8000c46:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	805a      	strh	r2, [r3, #2]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d008      	beq.n	8000c88 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8000c86:	e007      	b.n	8000c98 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	801a      	strh	r2, [r3, #0]
  }
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d008      	beq.n	8000cc8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000cc6:	e007      	b.n	8000cd8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	f023 0301 	bic.w	r3, r3, #1
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	801a      	strh	r2, [r3, #0]
  }
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	81fb      	strh	r3, [r7, #14]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	8c1b      	ldrh	r3, [r3, #32]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	8c1b      	ldrh	r3, [r3, #32]
 8000d0a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	8b1b      	ldrh	r3, [r3, #24]
 8000d10:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d18:	81fb      	strh	r3, [r7, #14]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	f023 0303 	bic.w	r3, r3, #3
 8000d20:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	89fb      	ldrh	r3, [r7, #14]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8000d2c:	89bb      	ldrh	r3, [r7, #12]
 8000d2e:	f023 0302 	bic.w	r3, r3, #2
 8000d32:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	891a      	ldrh	r2, [r3, #8]
 8000d38:	89bb      	ldrh	r3, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	885a      	ldrh	r2, [r3, #2]
 8000d42:	89bb      	ldrh	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	89fa      	ldrh	r2, [r7, #14]
 8000d54:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	89ba      	ldrh	r2, [r7, #12]
 8000d5a:	841a      	strh	r2, [r3, #32]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <TIM_OC3Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	81fb      	strh	r3, [r7, #14]
 8000d76:	2300      	movs	r3, #0
 8000d78:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	8c1b      	ldrh	r3, [r3, #32]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	8c1b      	ldrh	r3, [r3, #32]
 8000d8e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	8b9b      	ldrh	r3, [r3, #28]
 8000d94:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8000d96:	89fb      	ldrh	r3, [r7, #14]
 8000d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d9c:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	881a      	ldrh	r2, [r3, #0]
 8000da2:	89fb      	ldrh	r3, [r7, #14]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000da8:	89bb      	ldrh	r3, [r7, #12]
 8000daa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000dae:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	891b      	ldrh	r3, [r3, #8]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	89bb      	ldrh	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	885b      	ldrh	r3, [r3, #2]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	89bb      	ldrh	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	89fa      	ldrh	r2, [r7, #14]
 8000dd8:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	89ba      	ldrh	r2, [r7, #12]
 8000dde:	841a      	strh	r2, [r3, #32]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	8b1b      	ldrh	r3, [r3, #24]
 8000e00:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8000e02:	89fb      	ldrh	r3, [r7, #14]
 8000e04:	f023 0308 	bic.w	r3, r3, #8
 8000e08:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000e0a:	89fa      	ldrh	r2, [r7, #14]
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	89fa      	ldrh	r2, [r7, #14]
 8000e16:	831a      	strh	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	8b9b      	ldrh	r3, [r3, #28]
 8000e38:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000e3a:	89fb      	ldrh	r3, [r7, #14]
 8000e3c:	f023 0308 	bic.w	r3, r3, #8
 8000e40:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000e42:	89fa      	ldrh	r2, [r7, #14]
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	89fa      	ldrh	r2, [r7, #14]
 8000e4e:	839a      	strh	r2, [r3, #28]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d008      	beq.n	8000e84 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	899b      	ldrh	r3, [r3, #12]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000e82:	e009      	b.n	8000e98 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	899b      	ldrh	r3, [r3, #12]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	4013      	ands	r3, r2
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	819a      	strh	r2, [r3, #12]
  }
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <TIM_GetFlagStatus>:
  *     TIM_FLAG_CC1OF or TIM_FLAG_CC2OF flags.  
  * @note TIM10 and TIM11 can have only update flag, TIM_FLAG_CC1 or TIM_FLAG_CC1OF flags         
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET; 
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
   
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	8a1b      	ldrh	r3, [r3, #16]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e001      	b.n	8000ece <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <TIM_ClearFlag>:
  * @note TIM10 and TIM11 can have only update flag, TIM_FLAG_CC1
  *     or TIM_FLAG_CC1OF flags      
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	821a      	strh	r2, [r3, #16]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	81bb      	strh	r3, [r7, #12]
 8000f10:	2300      	movs	r3, #0
 8000f12:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	8a1b      	ldrh	r3, [r3, #16]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	899b      	ldrh	r3, [r3, #12]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000f2c:	89bb      	ldrh	r3, [r7, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <TIM_GetITStatus+0x42>
 8000f32:	897b      	ldrh	r3, [r7, #10]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e001      	b.n	8000f42 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	821a      	strh	r2, [r3, #16]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	8a1b      	ldrh	r3, [r3, #16]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	88db      	ldrh	r3, [r3, #6]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	899b      	ldrh	r3, [r3, #12]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000fbc:	f023 030c 	bic.w	r3, r3, #12
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	889a      	ldrh	r2, [r3, #4]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	891b      	ldrh	r3, [r3, #8]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	8a9b      	ldrh	r3, [r3, #20]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	899b      	ldrh	r3, [r3, #12]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	4313      	orrs	r3, r2
 8001000:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	b29a      	uxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fc5a 	bl	80008c8 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a2e      	ldr	r2, [pc, #184]	; (80010d0 <USART_Init+0x160>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d102      	bne.n	8001022 <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	e001      	b.n	8001026 <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	899b      	ldrh	r3, [r3, #12]
 800102a:	b29b      	uxth	r3, r3
 800102c:	b21b      	sxth	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	da0c      	bge.n	800104c <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001032:	6a3a      	ldr	r2, [r7, #32]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	009a      	lsls	r2, r3, #2
 800103c:	441a      	add	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fbb2 f3f3 	udiv	r3, r2, r3
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e00b      	b.n	8001064 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800104c:	6a3a      	ldr	r2, [r7, #32]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009a      	lsls	r2, r3, #2
 8001056:	441a      	add	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <USART_Init+0x164>)
 8001068:	fba2 2303 	umull	r2, r3, r2, r3
 800106c:	095b      	lsrs	r3, r3, #5
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	2264      	movs	r2, #100	; 0x64
 8001078:	fb02 f303 	mul.w	r3, r2, r3
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	899b      	ldrh	r3, [r3, #12]
 8001086:	b29b      	uxth	r3, r3
 8001088:	b21b      	sxth	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	da0c      	bge.n	80010a8 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	3332      	adds	r3, #50	; 0x32
 8001094:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <USART_Init+0x164>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a2:	4313      	orrs	r3, r2
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
 80010a6:	e00b      	b.n	80010c0 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	3332      	adds	r3, #50	; 0x32
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <USART_Init+0x164>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	095b      	lsrs	r3, r3, #5
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010bc:	4313      	orrs	r3, r2
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	811a      	strh	r2, [r3, #8]
}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40013800 	.word	0x40013800
 80010d4:	51eb851f 	.word	0x51eb851f

080010d8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010e6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	220c      	movs	r2, #12
 80010fe:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	819a      	strh	r2, [r3, #12]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	899b      	ldrh	r3, [r3, #12]
 8001126:	b29b      	uxth	r3, r3
 8001128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001132:	e007      	b.n	8001144 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	899b      	ldrh	r3, [r3, #12]
 8001138:	b29b      	uxth	r3, r3
 800113a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	819a      	strh	r2, [r3, #12]
  }
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001162:	b29a      	uxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	809a      	strh	r2, [r3, #4]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	095b      	lsrs	r3, r3, #5
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80011a2:	887b      	ldrh	r3, [r7, #2]
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80011aa:	2201      	movs	r2, #1
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d103      	bne.n	80011c2 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	330c      	adds	r3, #12
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	e009      	b.n	80011d6 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d103      	bne.n	80011d0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3310      	adds	r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	e002      	b.n	80011d6 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3314      	adds	r3, #20
 80011d4:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80011d6:	787b      	ldrb	r3, [r7, #1]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	6811      	ldr	r1, [r2, #0]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80011e8:	e006      	b.n	80011f8 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	6811      	ldr	r1, [r2, #0]
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	43d2      	mvns	r2, r2
 80011f4:	400a      	ands	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
  }
}
 80011f8:	bf00      	nop
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	b29a      	uxth	r2, r3
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	4013      	ands	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <Init_GPIO>:

void (*TIM_Tvz_IRQ_Callback)(void);
Struct_Of_Values sensors;

void Init_GPIO()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 8001242:	2101      	movs	r1, #1
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff fc19 	bl	8000a7c <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef init_gpio;

	//USART2
	GPIO_StructInit(&init_gpio);
 800124a:	463b      	mov	r3, r7
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fac9 	bl	80007e4 <GPIO_StructInit>
	init_gpio.GPIO_Mode=GPIO_Mode_AF;
 8001252:	2302      	movs	r3, #2
 8001254:	713b      	strb	r3, [r7, #4]
	init_gpio.GPIO_Pin=GPIO_Pin_3 | GPIO_Pin_2;
 8001256:	230c      	movs	r3, #12
 8001258:	603b      	str	r3, [r7, #0]
	init_gpio.GPIO_Speed=GPIO_Speed_40MHz;
 800125a:	2303      	movs	r3, #3
 800125c:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOA,&init_gpio);
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	4815      	ldr	r0, [pc, #84]	; (80012b8 <Init_GPIO+0x7c>)
 8001264:	f7ff fa28 	bl	80006b8 <GPIO_Init>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
 8001268:	2207      	movs	r2, #7
 800126a:	2102      	movs	r1, #2
 800126c:	4812      	ldr	r0, [pc, #72]	; (80012b8 <Init_GPIO+0x7c>)
 800126e:	f7ff fad3 	bl	8000818 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
 8001272:	2207      	movs	r2, #7
 8001274:	2103      	movs	r1, #3
 8001276:	4810      	ldr	r0, [pc, #64]	; (80012b8 <Init_GPIO+0x7c>)
 8001278:	f7ff face 	bl	8000818 <GPIO_PinAFConfig>

	//ADC1 1.sensor
	GPIO_StructInit(&init_gpio);
 800127c:	463b      	mov	r3, r7
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fab0 	bl	80007e4 <GPIO_StructInit>
	init_gpio.GPIO_Mode=GPIO_Mode_AN;
 8001284:	2303      	movs	r3, #3
 8001286:	713b      	strb	r3, [r7, #4]
	init_gpio.GPIO_Pin=GPIO_Pin_0;
 8001288:	2301      	movs	r3, #1
 800128a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA,&init_gpio);
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <Init_GPIO+0x7c>)
 8001292:	f7ff fa11 	bl	80006b8 <GPIO_Init>

	//ADC1 2.sensor
	GPIO_StructInit(&init_gpio);
 8001296:	463b      	mov	r3, r7
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff faa3 	bl	80007e4 <GPIO_StructInit>
	init_gpio.GPIO_Mode=GPIO_Mode_AN;
 800129e:	2303      	movs	r3, #3
 80012a0:	713b      	strb	r3, [r7, #4]
	init_gpio.GPIO_Pin=GPIO_Pin_1;
 80012a2:	2302      	movs	r3, #2
 80012a4:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA,&init_gpio);
 80012a6:	463b      	mov	r3, r7
 80012a8:	4619      	mov	r1, r3
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <Init_GPIO+0x7c>)
 80012ac:	f7ff fa04 	bl	80006b8 <GPIO_Init>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40020000 	.word	0x40020000

080012bc <Init_USART>:

void Init_USART()
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 80012c2:	2101      	movs	r1, #1
 80012c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012c8:	f7ff fc14 	bl	8000af4 <RCC_APB1PeriphClockCmd>
	USART_InitTypeDef init_usart;
	NVIC_InitTypeDef init_nvic;

	USART_StructInit(&init_usart);
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff01 	bl	80010d8 <USART_StructInit>
	init_usart.USART_BaudRate=9600;
 80012d6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80012da:	60bb      	str	r3, [r7, #8]
	init_usart.USART_Mode=USART_Mode_Tx;
 80012dc:	2308      	movs	r3, #8
 80012de:	827b      	strh	r3, [r7, #18]
	USART_Init(USART2,&init_usart);
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4619      	mov	r1, r3
 80012e6:	480c      	ldr	r0, [pc, #48]	; (8001318 <Init_USART+0x5c>)
 80012e8:	f7ff fe42 	bl	8000f70 <USART_Init>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 80012ec:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80012f0:	f7fe ff44 	bl	800017c <NVIC_PriorityGroupConfig>
	init_nvic.NVIC_IRQChannel=USART2_IRQn;
 80012f4:	2326      	movs	r3, #38	; 0x26
 80012f6:	713b      	strb	r3, [r7, #4]
	init_nvic.NVIC_IRQChannelCmd=ENABLE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	71fb      	strb	r3, [r7, #7]
	init_nvic.NVIC_IRQChannelSubPriority=0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&init_nvic);
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4618      	mov	r0, r3
 8001304:	f7fe ff4c 	bl	80001a0 <NVIC_Init>

	USART_Cmd(USART2,ENABLE);
 8001308:	2101      	movs	r1, #1
 800130a:	4803      	ldr	r0, [pc, #12]	; (8001318 <Init_USART+0x5c>)
 800130c:	f7ff ff00 	bl	8001110 <USART_Cmd>
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40004400 	.word	0x40004400

0800131c <Init_ADC>:

void Init_ADC()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
 8001322:	2101      	movs	r1, #1
 8001324:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001328:	f7ff fbc6 	bl	8000ab8 <RCC_APB2PeriphClockCmd>
	ADC_InitTypeDef init_adc;

	RCC_HSICmd(ENABLE);
 800132c:	2001      	movs	r0, #1
 800132e:	f7ff fabb 	bl	80008a8 <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY)==RESET);
 8001332:	bf00      	nop
 8001334:	2021      	movs	r0, #33	; 0x21
 8001336:	f7ff fbfb 	bl	8000b30 <RCC_GetFlagStatus>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f9      	beq.n	8001334 <Init_ADC+0x18>

	ADC_StructInit(&init_adc);
 8001340:	463b      	mov	r3, r7
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ffe0 	bl	8000308 <ADC_StructInit>
	ADC_Init(ADC1,&init_adc);
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <Init_ADC+0x58>)
 800134e:	f7fe ff87 	bl	8000260 <ADC_Init>
	//ADC_RegularChannelConfig(ADC1,ADC_Channel_0,1,ADC_SampleTime_384Cycles);

	ADC_Cmd(ADC1,ENABLE);
 8001352:	2101      	movs	r1, #1
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <Init_ADC+0x58>)
 8001356:	f7fe fff7 	bl	8000348 <ADC_Cmd>
	while(ADC_GetFlagStatus(ADC1,ADC_FLAG_ADONS)==RESET);
 800135a:	bf00      	nop
 800135c:	2140      	movs	r1, #64	; 0x40
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <Init_ADC+0x58>)
 8001360:	f7ff f990 	bl	8000684 <ADC_GetFlagStatus>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f8      	beq.n	800135c <Init_ADC+0x40>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40012400 	.word	0x40012400

08001378 <Init_Timer_Tvz>:

void Init_Timer_Tvz()
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
 800137e:	2101      	movs	r1, #1
 8001380:	2002      	movs	r0, #2
 8001382:	f7ff fbb7 	bl	8000af4 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef init_tim;
	NVIC_InitTypeDef init_nvic;

	TIM_TimeBaseStructInit(&init_tim);
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc55 	bl	8000c38 <TIM_TimeBaseStructInit>
	init_tim.TIM_Period=1000-1;
 800138e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001392:	60bb      	str	r3, [r7, #8]
	init_tim.TIM_Prescaler=2000-1;
 8001394:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001398:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseInit(TIM3,&init_tim);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <Init_Timer_Tvz+0x5c>)
 80013a0:	f7ff fbf8 	bl	8000b94 <TIM_TimeBaseInit>
	TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2101      	movs	r1, #1
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <Init_Timer_Tvz+0x5c>)
 80013aa:	f7ff fd57 	bl	8000e5c <TIM_ITConfig>

	init_nvic.NVIC_IRQChannel=TIM3_IRQn;
 80013ae:	231d      	movs	r3, #29
 80013b0:	703b      	strb	r3, [r7, #0]
	init_nvic.NVIC_IRQChannelCmd=ENABLE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	70fb      	strb	r3, [r7, #3]
	init_nvic.NVIC_IRQChannelSubPriority=1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	70bb      	strb	r3, [r7, #2]
	NVIC_Init(&init_nvic);
 80013ba:	463b      	mov	r3, r7
 80013bc:	4618      	mov	r0, r3
 80013be:	f7fe feef 	bl	80001a0 <NVIC_Init>

	TIM_Cmd(TIM3,ENABLE);
 80013c2:	2101      	movs	r1, #1
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <Init_Timer_Tvz+0x5c>)
 80013c6:	f7ff fc6d 	bl	8000ca4 <TIM_Cmd>
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40000400 	.word	0x40000400

080013d8 <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	if(TIM_GetFlagStatus(TIM3,TIM_FLAG_Update))
 80013dc:	2101      	movs	r1, #1
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <TIM3_IRQHandler+0x24>)
 80013e0:	f7ff fd60 	bl	8000ea4 <TIM_GetFlagStatus>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <TIM3_IRQHandler+0x20>
	{
		TIM_Tvz_IRQ_Callback();
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <TIM3_IRQHandler+0x28>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4798      	blx	r3
		TIM_ClearFlag(TIM3,TIM_FLAG_Update);
 80013f0:	2101      	movs	r1, #1
 80013f2:	4802      	ldr	r0, [pc, #8]	; (80013fc <TIM3_IRQHandler+0x24>)
 80013f4:	f7ff fd72 	bl	8000edc <TIM_ClearFlag>
	}
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40000400 	.word	0x40000400
 8001400:	20000044 	.word	0x20000044

08001404 <USART2_IRQHandler>:



void USART2_IRQHandler()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	char character;
	if(USART_GetFlagStatus(USART2,USART_FLAG_TXE))
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	4810      	ldr	r0, [pc, #64]	; (8001450 <USART2_IRQHandler+0x4c>)
 800140e:	f7ff fef9 	bl	8001204 <USART_GetFlagStatus>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d016      	beq.n	8001446 <USART2_IRQHandler+0x42>
	{
		character=*sensors.TX_Buffer++;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <USART2_IRQHandler+0x50>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	490d      	ldr	r1, [pc, #52]	; (8001454 <USART2_IRQHandler+0x50>)
 8001420:	604a      	str	r2, [r1, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	71fb      	strb	r3, [r7, #7]
		if(character) USART_SendData(USART2,character);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d006      	beq.n	800143a <USART2_IRQHandler+0x36>
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	b29b      	uxth	r3, r3
 8001430:	4619      	mov	r1, r3
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <USART2_IRQHandler+0x4c>)
 8001434:	f7ff fe8c 	bl	8001150 <USART_SendData>
		else USART_ITConfig(USART2,USART_IT_TXE,DISABLE);
	}
}
 8001438:	e005      	b.n	8001446 <USART2_IRQHandler+0x42>
	char character;
	if(USART_GetFlagStatus(USART2,USART_FLAG_TXE))
	{
		character=*sensors.TX_Buffer++;
		if(character) USART_SendData(USART2,character);
		else USART_ITConfig(USART2,USART_IT_TXE,DISABLE);
 800143a:	2200      	movs	r2, #0
 800143c:	f240 7127 	movw	r1, #1831	; 0x727
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <USART2_IRQHandler+0x4c>)
 8001442:	f7ff fe97 	bl	8001174 <USART_ITConfig>
	}
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40004400 	.word	0x40004400
 8001454:	20000048 	.word	0x20000048

08001458 <Send_Buffer>:

void Send_Buffer(char *Buffer)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	sensors.TX_Buffer=Buffer;
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <Send_Buffer+0x24>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6053      	str	r3, [r2, #4]
	USART_ITConfig(USART2,USART_IT_TXE,ENABLE);
 8001466:	2201      	movs	r2, #1
 8001468:	f240 7127 	movw	r1, #1831	; 0x727
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <Send_Buffer+0x28>)
 800146e:	f7ff fe81 	bl	8001174 <USART_ITConfig>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000048 	.word	0x20000048
 8001480:	40004400 	.word	0x40004400

08001484 <ADC_Right_Sensor>:


uint16_t ADC_Right_Sensor()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1,ADC_Channel_0,1,ADC_SampleTime_384Cycles);
 8001488:	2307      	movs	r3, #7
 800148a:	2201      	movs	r2, #1
 800148c:	2100      	movs	r1, #0
 800148e:	480a      	ldr	r0, [pc, #40]	; (80014b8 <ADC_Right_Sensor+0x34>)
 8001490:	f7fe ff76 	bl	8000380 <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv(ADC1);
 8001494:	4808      	ldr	r0, [pc, #32]	; (80014b8 <ADC_Right_Sensor+0x34>)
 8001496:	f7ff f8d9 	bl	800064c <ADC_SoftwareStartConv>
	while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)==RESET);
 800149a:	bf00      	nop
 800149c:	2102      	movs	r1, #2
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <ADC_Right_Sensor+0x34>)
 80014a0:	f7ff f8f0 	bl	8000684 <ADC_GetFlagStatus>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f8      	beq.n	800149c <ADC_Right_Sensor+0x18>
	return ADC_GetConversionValue(ADC1);
 80014aa:	4803      	ldr	r0, [pc, #12]	; (80014b8 <ADC_Right_Sensor+0x34>)
 80014ac:	f7ff f8de 	bl	800066c <ADC_GetConversionValue>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40012400 	.word	0x40012400

080014bc <ADC_Left_Sensor>:


uint16_t ADC_Left_Sensor()
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1,ADC_Channel_1,1,ADC_SampleTime_384Cycles);
 80014c0:	2307      	movs	r3, #7
 80014c2:	2201      	movs	r2, #1
 80014c4:	2101      	movs	r1, #1
 80014c6:	480a      	ldr	r0, [pc, #40]	; (80014f0 <ADC_Left_Sensor+0x34>)
 80014c8:	f7fe ff5a 	bl	8000380 <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv(ADC1);
 80014cc:	4808      	ldr	r0, [pc, #32]	; (80014f0 <ADC_Left_Sensor+0x34>)
 80014ce:	f7ff f8bd 	bl	800064c <ADC_SoftwareStartConv>
	while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)==RESET);
 80014d2:	bf00      	nop
 80014d4:	2102      	movs	r1, #2
 80014d6:	4806      	ldr	r0, [pc, #24]	; (80014f0 <ADC_Left_Sensor+0x34>)
 80014d8:	f7ff f8d4 	bl	8000684 <ADC_GetFlagStatus>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f8      	beq.n	80014d4 <ADC_Left_Sensor+0x18>
	return ADC_GetConversionValue(ADC1);
 80014e2:	4803      	ldr	r0, [pc, #12]	; (80014f0 <ADC_Left_Sensor+0x34>)
 80014e4:	f7ff f8c2 	bl	800066c <ADC_GetConversionValue>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40012400 	.word	0x40012400

080014f4 <Delay>:

void Delay(uint32_t time)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(i=0;i<time;i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	e002      	b.n	8001508 <Delay+0x14>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3301      	adds	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3f8      	bcc.n	8001502 <Delay+0xe>
	{
	}
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <Timer_Tvz_Callback>:

void Timer_Tvz_Callback()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
	uint16_t AD_value;
	uint16_t AD_value2;

	AD_value=ADC_Right_Sensor();
 8001522:	f7ff ffaf 	bl	8001484 <ADC_Right_Sensor>
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
	sensors.Right_Sensor=AD_value;
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <Timer_Tvz_Callback+0x2c>)
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	8013      	strh	r3, [r2, #0]

	AD_value2=ADC_Left_Sensor();
 8001530:	f7ff ffc4 	bl	80014bc <ADC_Left_Sensor>
 8001534:	4603      	mov	r3, r0
 8001536:	80bb      	strh	r3, [r7, #4]
    sensors.Left_Sensor=AD_value2;
 8001538:	4a03      	ldr	r2, [pc, #12]	; (8001548 <Timer_Tvz_Callback+0x2c>)
 800153a:	88bb      	ldrh	r3, [r7, #4]
 800153c:	8053      	strh	r3, [r2, #2]
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000048 	.word	0x20000048

0800154c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	da0b      	bge.n	8001578 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001560:	490d      	ldr	r1, [pc, #52]	; (8001598 <NVIC_SetPriority+0x4c>)
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	3b04      	subs	r3, #4
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001576:	e009      	b.n	800158c <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001578:	4908      	ldr	r1, [pc, #32]	; (800159c <NVIC_SetPriority+0x50>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00
 800159c:	e000e100 	.word	0xe000e100

080015a0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ae:	d301      	bcc.n	80015b4 <SysTick_Config+0x14>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e011      	b.n	80015d8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SysTick_Config+0x40>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015bc:	3b01      	subs	r3, #1
 80015be:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80015c0:	210f      	movs	r1, #15
 80015c2:	f04f 30ff 	mov.w	r0, #4294967295
 80015c6:	f7ff ffc1 	bl	800154c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x40>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <SysTick_Config+0x40>)
 80015d2:	2207      	movs	r2, #7
 80015d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <Delaypwm>:
//void SysTick_Handler(void){
//	msTicks++;
//}

//Delays number of Systicks (happens every 1ms)
static void Delaypwm(__IO uint32_t dlyTicks){
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	uint32_t curTicks = msTicks;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <Delaypwm+0x28>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
	while ((msTicks-curTicks)<dlyTicks);
 80015f2:	bf00      	nop
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <Delaypwm+0x28>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1ad2      	subs	r2, r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d3f8      	bcc.n	80015f4 <Delaypwm+0x10>
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	20000050 	.word	0x20000050

08001610 <setSysTick>:
void setSysTick(void){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	if(SysTick_Config(SystemCoreClock / 1000)){
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <setSysTick+0x24>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <setSysTick+0x28>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	099b      	lsrs	r3, r3, #6
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ffbd 	bl	80015a0 <SysTick_Config>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d000      	beq.n	800162e <setSysTick+0x1e>
		while(1){}
 800162c:	e7fe      	b.n	800162c <setSysTick+0x1c>
	}
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000001c 	.word	0x2000001c
 8001638:	10624dd3 	.word	0x10624dd3

0800163c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b096      	sub	sp, #88	; 0x58
 8001640:	af00      	add	r7, sp, #0
	TIM_Tvz_IRQ_Callback=Timer_Tvz_Callback;
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <main+0x10c>)
 8001644:	4a41      	ldr	r2, [pc, #260]	; (800174c <main+0x110>)
 8001646:	601a      	str	r2, [r3, #0]




Init_GPIO();
 8001648:	f7ff fdf8 	bl	800123c <Init_GPIO>
Init_USART();
 800164c:	f7ff fe36 	bl	80012bc <Init_USART>
Init_ADC();
 8001650:	f7ff fe64 	bl	800131c <Init_ADC>
Init_Timer_Tvz();
 8001654:	f7ff fe90 	bl	8001378 <Init_Timer_Tvz>
	setSysTick();
 8001658:	f7ff ffda 	bl	8001610 <setSysTick>
	InitializeGPIO();
 800165c:	f000 f8ec 	bl	8001838 <InitializeGPIO>
	InitializeTimer();
 8001660:	f000 f87e 	bl	8001760 <InitializeTimer>
	InitializePWMChannel();
 8001664:	f000 f89c 	bl	80017a0 <InitializePWMChannel>
	InitializePWMChannel2();
 8001668:	f000 f8c0 	bl	80017ec <InitializePWMChannel2>


char buffer[50];
long motor_pravy = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	657b      	str	r3, [r7, #84]	; 0x54
long motor_lavy = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	653b      	str	r3, [r7, #80]	; 0x50
long naj_lavy = 250;
 8001674:	23fa      	movs	r3, #250	; 0xfa
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c
long naj_pravy = 250;
 8001678:	23fa      	movs	r3, #250	; 0xfa
 800167a:	64bb      	str	r3, [r7, #72]	; 0x48
long najv_lavy = 3500;
 800167c:	f640 53ac 	movw	r3, #3500	; 0xdac
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
long najv_pravy = 3500;
 8001682:	f640 53ac 	movw	r3, #3500	; 0xdac
 8001686:	643b      	str	r3, [r7, #64]	; 0x40
int rozdiel = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	63fb      	str	r3, [r7, #60]	; 0x3c
int r=0;
 800168c:	2300      	movs	r3, #0
 800168e:	63bb      	str	r3, [r7, #56]	; 0x38
			if(sensors.Left_Sensor>najv_lavy)
			{
				najv_lavy = sensors.Left_Sensor;
			}*/

			motor_pravy = ((sensors.Right_Sensor - naj_pravy)*(1000-300))/(najv_pravy-naj_pravy);
 8001690:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <main+0x114>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800169e:	fb02 f203 	mul.w	r2, r2, r3
 80016a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80016a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016a6:	1acb      	subs	r3, r1, r3
 80016a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ac:	657b      	str	r3, [r7, #84]	; 0x54
			motor_lavy = ((sensors.Left_Sensor - naj_lavy)*(1000-300))/(najv_lavy-naj_lavy);
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <main+0x114>)
 80016b0:	885b      	ldrh	r3, [r3, #2]
 80016b2:	461a      	mov	r2, r3
 80016b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80016bc:	fb02 f203 	mul.w	r2, r2, r3
 80016c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80016c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016c4:	1acb      	subs	r3, r1, r3
 80016c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ca:	653b      	str	r3, [r7, #80]	; 0x50

			rozdiel = motor_pravy - motor_lavy;
 80016cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
			Delaypwm(500);
			r=1;} */



			if( rozdiel <= 70 && rozdiel >= -70)
 80016d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d6:	2b46      	cmp	r3, #70	; 0x46
 80016d8:	dc0c      	bgt.n	80016f4 <main+0xb8>
 80016da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016dc:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80016e0:	db08      	blt.n	80016f4 <main+0xb8>
			{
				TIM4->CCR1 = 0;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <main+0x118>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR3 = 0; //1800
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <main+0x118>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	63da      	str	r2, [r3, #60]	; 0x3c
				Delaypwm(100);
 80016ee:	2064      	movs	r0, #100	; 0x64
 80016f0:	f7ff ff78 	bl	80015e4 <Delaypwm>
			}

			if(rozdiel > 70 )
 80016f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f6:	2b46      	cmp	r3, #70	; 0x46
 80016f8:	dd09      	ble.n	800170e <main+0xd2>
			{
				TIM4->CCR1 = 1800;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <main+0x118>)
 80016fc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR3 = 0; //1200
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <main+0x118>)
 8001704:	2200      	movs	r2, #0
 8001706:	63da      	str	r2, [r3, #60]	; 0x3c
				Delaypwm(100);
 8001708:	2064      	movs	r0, #100	; 0x64
 800170a:	f7ff ff6b 	bl	80015e4 <Delaypwm>
					//sprintf(buffer,"pravy");
					//Send_Buffer(buffer);
					//Delay(800000);
			}

			if (rozdiel < -70)
 800170e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001710:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001714:	da09      	bge.n	800172a <main+0xee>
			{
				TIM4->CCR3 = 1200; //1800
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <main+0x118>)
 8001718:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800171c:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM4->CCR1 = 0;
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <main+0x118>)
 8001720:	2200      	movs	r2, #0
 8001722:	635a      	str	r2, [r3, #52]	; 0x34
				Delaypwm(100);
 8001724:	2064      	movs	r0, #100	; 0x64
 8001726:	f7ff ff5d 	bl	80015e4 <Delaypwm>
			//Send_Buffer(buffer);
			//Delay(800000);
			//sprintf(buffer,"pravy motor->%d\n\rlavy motor->%d\n\r",motor_pravy, motor_lavy);
			//Send_Buffer(buffer);
			//Delay(800000);
			sprintf(buffer,"rozdiel->%d\n\r",rozdiel);
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800172e:	490a      	ldr	r1, [pc, #40]	; (8001758 <main+0x11c>)
 8001730:	4618      	mov	r0, r3
 8001732:	f000 faef 	bl	8001d14 <siprintf>
			Send_Buffer(buffer);
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe8d 	bl	8001458 <Send_Buffer>
						Delay(800000);
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <main+0x120>)
 8001740:	f7ff fed8 	bl	80014f4 <Delay>



			}
 8001744:	e7a4      	b.n	8001690 <main+0x54>
 8001746:	bf00      	nop
 8001748:	20000044 	.word	0x20000044
 800174c:	0800151d 	.word	0x0800151d
 8001750:	20000048 	.word	0x20000048
 8001754:	40000800 	.word	0x40000800
 8001758:	08001da4 	.word	0x08001da4
 800175c:	000c3500 	.word	0x000c3500

08001760 <InitializeTimer>:
#include <string.h>
#include <pwm.h>
#include <stdlib.h>

void InitializeTimer()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001766:	2101      	movs	r1, #1
 8001768:	2004      	movs	r0, #4
 800176a:	f7ff f9c3 	bl	8000af4 <RCC_APB1PeriphClockCmd>

    TIM_TimeBaseInitTypeDef timerInitStructure;
    timerInitStructure.TIM_Prescaler = 16-1;
 800176e:	230f      	movs	r3, #15
 8001770:	80bb      	strh	r3, [r7, #4]
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001772:	2300      	movs	r3, #0
 8001774:	80fb      	strh	r3, [r7, #6]
    timerInitStructure.TIM_Period = 1999;
 8001776:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800177a:	60bb      	str	r3, [r7, #8]
    timerInitStructure.TIM_ClockDivision = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM4, &timerInitStructure);
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <InitializeTimer+0x3c>)
 8001786:	f7ff fa05 	bl	8000b94 <TIM_TimeBaseInit>
    TIM_Cmd(TIM4, ENABLE);
 800178a:	2101      	movs	r1, #1
 800178c:	4803      	ldr	r0, [pc, #12]	; (800179c <InitializeTimer+0x3c>)
 800178e:	f7ff fa89 	bl	8000ca4 <TIM_Cmd>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40000800 	.word	0x40000800

080017a0 <InitializePWMChannel>:

void InitializePWMChannel()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
    TIM_OCInitTypeDef outputChannelInit ;
    outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 80017a6:	2360      	movs	r3, #96	; 0x60
 80017a8:	80bb      	strh	r3, [r7, #4]
    outputChannelInit.TIM_Pulse = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
    outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 80017ae:	2301      	movs	r3, #1
 80017b0:	80fb      	strh	r3, [r7, #6]
    outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
 80017b2:	2300      	movs	r3, #0
 80017b4:	81bb      	strh	r3, [r7, #12]

    TIM_OC1Init(TIM4, &outputChannelInit);
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	480a      	ldr	r0, [pc, #40]	; (80017e4 <InitializePWMChannel+0x44>)
 80017bc:	f7ff fa92 	bl	8000ce4 <TIM_OC1Init>
    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80017c0:	2108      	movs	r1, #8
 80017c2:	4808      	ldr	r0, [pc, #32]	; (80017e4 <InitializePWMChannel+0x44>)
 80017c4:	f7ff fb12 	bl	8000dec <TIM_OC1PreloadConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_TIM4);
 80017c8:	2202      	movs	r2, #2
 80017ca:	2106      	movs	r1, #6
 80017cc:	4806      	ldr	r0, [pc, #24]	; (80017e8 <InitializePWMChannel+0x48>)
 80017ce:	f7ff f823 	bl	8000818 <GPIO_PinAFConfig>
    TIM_ARRPreloadConfig(TIM4,ENABLE);
 80017d2:	2101      	movs	r1, #1
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <InitializePWMChannel+0x44>)
 80017d6:	f7ff fa45 	bl	8000c64 <TIM_ARRPreloadConfig>
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40000800 	.word	0x40000800
 80017e8:	40020400 	.word	0x40020400

080017ec <InitializePWMChannel2>:

void InitializePWMChannel2()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
    TIM_OCInitTypeDef outputChannelInit ;
    outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 80017f2:	2360      	movs	r3, #96	; 0x60
 80017f4:	80bb      	strh	r3, [r7, #4]
    outputChannelInit.TIM_Pulse = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
    outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 80017fa:	2301      	movs	r3, #1
 80017fc:	80fb      	strh	r3, [r7, #6]
    outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
 80017fe:	2300      	movs	r3, #0
 8001800:	81bb      	strh	r3, [r7, #12]

    TIM_OC3Init(TIM4, &outputChannelInit);
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	480a      	ldr	r0, [pc, #40]	; (8001830 <InitializePWMChannel2+0x44>)
 8001808:	f7ff faae 	bl	8000d68 <TIM_OC3Init>
    TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800180c:	2108      	movs	r1, #8
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <InitializePWMChannel2+0x44>)
 8001810:	f7ff fb08 	bl	8000e24 <TIM_OC3PreloadConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_TIM4);
 8001814:	2202      	movs	r2, #2
 8001816:	2108      	movs	r1, #8
 8001818:	4806      	ldr	r0, [pc, #24]	; (8001834 <InitializePWMChannel2+0x48>)
 800181a:	f7fe fffd 	bl	8000818 <GPIO_PinAFConfig>
    TIM_ARRPreloadConfig(TIM4,ENABLE);
 800181e:	2101      	movs	r1, #1
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <InitializePWMChannel2+0x44>)
 8001822:	f7ff fa1f 	bl	8000c64 <TIM_ARRPreloadConfig>
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40000800 	.word	0x40000800
 8001834:	40020400 	.word	0x40020400

08001838 <InitializeGPIO>:

void InitializeGPIO()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800183e:	2101      	movs	r1, #1
 8001840:	2002      	movs	r0, #2
 8001842:	f7ff f91b 	bl	8000a7c <RCC_AHBPeriphClockCmd>

    GPIO_InitTypeDef gpioStructure;
    gpioStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_8;
 8001846:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800184a:	603b      	str	r3, [r7, #0]
    gpioStructure.GPIO_Mode = GPIO_Mode_AF;
 800184c:	2302      	movs	r3, #2
 800184e:	713b      	strb	r3, [r7, #4]
    gpioStructure.GPIO_OType = GPIO_OType_PP;
 8001850:	2300      	movs	r3, #0
 8001852:	71bb      	strb	r3, [r7, #6]
    gpioStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8001854:	2301      	movs	r3, #1
 8001856:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001858:	2303      	movs	r3, #3
 800185a:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOB, &gpioStructure);
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <InitializeGPIO+0x38>)
 8001862:	f7fe ff29 	bl	80006b8 <GPIO_Init>

}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40020400 	.word	0x40020400

08001874 <TIM2_IRQHandler>:
{
	TIM9->CCR1 = gDutyCycleOut = value;
}

void TIM2_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_CC2) == SET)
 8001878:	2104      	movs	r1, #4
 800187a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800187e:	f7ff fb3d 	bl	8000efc <TIM_GetITStatus>
 8001882:	4603      	mov	r3, r0
 8001884:	2b01      	cmp	r3, #1
 8001886:	d11e      	bne.n	80018c6 <TIM2_IRQHandler+0x52>
	{
		/* Clear TIM3 Capture compare interrupt pending bit */
		/* Get the Input Capture value */
		gIC2Value = TIM2->CCR2;
 8001888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800188c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <TIM2_IRQHandler+0x84>)
 8001892:	801a      	strh	r2, [r3, #0]

		/* Duty cycle computation */
		gDutyCycleIn = TIM2->CCR1;
 8001894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <TIM2_IRQHandler+0x88>)
 800189e:	801a      	strh	r2, [r3, #0]

		/* Frequency computation */
		gFrequency = 1000000 / gIC2Value;
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <TIM2_IRQHandler+0x84>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <TIM2_IRQHandler+0x8c>)
 80018a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <TIM2_IRQHandler+0x90>)
 80018b0:	801a      	strh	r2, [r3, #0]

		TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 80018b2:	2102      	movs	r1, #2
 80018b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018b8:	f7ff fb4a 	bl	8000f50 <TIM_ClearITPendingBit>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80018bc:	2101      	movs	r1, #1
 80018be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018c2:	f7ff fb45 	bl	8000f50 <TIM_ClearITPendingBit>
	}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)
 80018c6:	2101      	movs	r1, #1
 80018c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018cc:	f7ff fb16 	bl	8000efc <TIM_GetITStatus>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d10e      	bne.n	80018f4 <TIM2_IRQHandler+0x80>
	{
		gDutyCycleIn = gDutyCycleOut = 0;
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <TIM2_IRQHandler+0x94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	801a      	strh	r2, [r3, #0]
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <TIM2_IRQHandler+0x94>)
 80018de:	881a      	ldrh	r2, [r3, #0]
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <TIM2_IRQHandler+0x88>)
 80018e2:	801a      	strh	r2, [r3, #0]
		gFrequency = 0;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <TIM2_IRQHandler+0x90>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	801a      	strh	r2, [r3, #0]

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80018ea:	2101      	movs	r1, #1
 80018ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018f0:	f7ff fb2e 	bl	8000f50 <TIM_ClearITPendingBit>
	}
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000003c 	.word	0x2000003c
 80018fc:	2000003e 	.word	0x2000003e
 8001900:	000f4240 	.word	0x000f4240
 8001904:	20000042 	.word	0x20000042
 8001908:	20000040 	.word	0x20000040

0800190c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001944 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001910:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001912:	e003      	b.n	800191c <LoopCopyDataInit>

08001914 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8001916:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001918:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800191a:	3104      	adds	r1, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800191c:	480b      	ldr	r0, [pc, #44]	; (800194c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001920:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001922:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001924:	d3f6      	bcc.n	8001914 <CopyDataInit>
  ldr r2, =_sbss
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001928:	e002      	b.n	8001930 <LoopFillZerobss>

0800192a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800192c:	f842 3b04 	str.w	r3, [r2], #4

08001930 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001932:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001934:	d3f9      	bcc.n	800192a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001936:	f000 f849 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f000 fa01 	bl	8001d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800193e:	f7ff fe7d 	bl	800163c <main>
  bx lr
 8001942:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001944:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001948:	08001dbc 	.word	0x08001dbc
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001950:	20000020 	.word	0x20000020
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001954:	20000020 	.word	0x20000020
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001958:	20000054 	.word	0x20000054

0800195c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC1_IRQHandler>
	...

08001960 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001970:	e7fe      	b.n	8001970 <HardFault_Handler+0x4>
 8001972:	bf00      	nop

08001974 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>
 800197a:	bf00      	nop

0800197c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001980:	e7fe      	b.n	8001980 <BusFault_Handler+0x4>
 8001982:	bf00      	nop

08001984 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>
 800198a:	bf00      	nop

0800198c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
volatile uint32_t msTicks;
void SysTick_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	msTicks++;
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Handler+0x18>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <SysTick_Handler+0x18>)
 80019bc:	6013      	str	r3, [r2, #0]
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000050 	.word	0x20000050

080019cc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80019d0:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <SystemInit+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <SystemInit+0x5c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80019dc:	4912      	ldr	r1, [pc, #72]	; (8001a28 <SystemInit+0x5c>)
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <SystemInit+0x5c>)
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <SystemInit+0x60>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80019e8:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <SystemInit+0x5c>)
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <SystemInit+0x5c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80019f2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80019f6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <SystemInit+0x5c>)
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <SystemInit+0x5c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001a04:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <SystemInit+0x5c>)
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <SystemInit+0x5c>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001a0e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SystemInit+0x5c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001a16:	f000 f80d 	bl	8001a34 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <SystemInit+0x64>)
 8001a1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a20:	609a      	str	r2, [r3, #8]
#endif
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	88ffc00c 	.word	0x88ffc00c
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001a42:	4a41      	ldr	r2, [pc, #260]	; (8001b48 <SetSysClock+0x114>)
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <SetSysClock+0x114>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <SetSysClock+0x114>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d103      	bne.n	8001a6c <SetSysClock+0x38>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a6a:	d1f0      	bne.n	8001a4e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <SetSysClock+0x114>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	e001      	b.n	8001a82 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d15a      	bne.n	8001b3e <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001a88:	4a30      	ldr	r2, [pc, #192]	; (8001b4c <SetSysClock+0x118>)
 8001a8a:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <SetSysClock+0x118>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001a94:	4a2d      	ldr	r2, [pc, #180]	; (8001b4c <SetSysClock+0x118>)
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <SetSysClock+0x118>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001aa0:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <SetSysClock+0x118>)
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <SetSysClock+0x118>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <SetSysClock+0x114>)
 8001aae:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <SetSysClock+0x114>)
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <SetSysClock+0x11c>)
 8001aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001abe:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001ac0:	bf00      	nop
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <SetSysClock+0x11c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f9      	bne.n	8001ac2 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001ace:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <SetSysClock+0x114>)
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <SetSysClock+0x114>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <SetSysClock+0x114>)
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <SetSysClock+0x114>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001ade:	4a1a      	ldr	r2, [pc, #104]	; (8001b48 <SetSysClock+0x114>)
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <SetSysClock+0x114>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001ae6:	4a18      	ldr	r2, [pc, #96]	; (8001b48 <SetSysClock+0x114>)
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <SetSysClock+0x114>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001af0:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001af2:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <SetSysClock+0x114>)
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <SetSysClock+0x114>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001afc:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <SetSysClock+0x114>)
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <SetSysClock+0x114>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b08:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001b0a:	bf00      	nop
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <SetSysClock+0x114>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f9      	beq.n	8001b0c <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <SetSysClock+0x114>)
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <SetSysClock+0x114>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001b24:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <SetSysClock+0x114>)
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <SetSysClock+0x114>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f043 0303 	orr.w	r3, r3, #3
 8001b2e:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001b30:	bf00      	nop
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <SetSysClock+0x114>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b0c      	cmp	r3, #12
 8001b3c:	d1f9      	bne.n	8001b32 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40023c00 	.word	0x40023c00
 8001b50:	40007000 	.word	0x40007000

08001b54 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001b64:	e004      	b.n	8001b70 <ts_itoa+0x1c>
		div *= base;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d2f3      	bcs.n	8001b66 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 8001b7e:	e029      	b.n	8001bd4 <ts_itoa+0x80>
	{
		int num = d/div;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	613b      	str	r3, [r7, #16]
		d = d%div;
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b92:	fb02 f201 	mul.w	r2, r2, r1
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b09      	cmp	r3, #9
 8001ba8:	dd0a      	ble.n	8001bc0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1c59      	adds	r1, r3, #1
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	6011      	str	r1, [r2, #0]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	3237      	adds	r2, #55	; 0x37
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e009      	b.n	8001bd4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	1c59      	adds	r1, r3, #1
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	6011      	str	r1, [r2, #0]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	3230      	adds	r2, #48	; 0x30
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1d2      	bne.n	8001b80 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 8001bda:	bf00      	nop
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8001bf4:	e07d      	b.n	8001cf2 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b25      	cmp	r3, #37	; 0x25
 8001bfc:	d171      	bne.n	8001ce2 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	3301      	adds	r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b64      	cmp	r3, #100	; 0x64
 8001c0a:	d01e      	beq.n	8001c4a <ts_formatstring+0x66>
 8001c0c:	2b64      	cmp	r3, #100	; 0x64
 8001c0e:	dc06      	bgt.n	8001c1e <ts_formatstring+0x3a>
 8001c10:	2b58      	cmp	r3, #88	; 0x58
 8001c12:	d050      	beq.n	8001cb6 <ts_formatstring+0xd2>
 8001c14:	2b63      	cmp	r3, #99	; 0x63
 8001c16:	d00e      	beq.n	8001c36 <ts_formatstring+0x52>
 8001c18:	2b25      	cmp	r3, #37	; 0x25
 8001c1a:	d058      	beq.n	8001cce <ts_formatstring+0xea>
 8001c1c:	e05d      	b.n	8001cda <ts_formatstring+0xf6>
 8001c1e:	2b73      	cmp	r3, #115	; 0x73
 8001c20:	d02b      	beq.n	8001c7a <ts_formatstring+0x96>
 8001c22:	2b73      	cmp	r3, #115	; 0x73
 8001c24:	dc02      	bgt.n	8001c2c <ts_formatstring+0x48>
 8001c26:	2b69      	cmp	r3, #105	; 0x69
 8001c28:	d00f      	beq.n	8001c4a <ts_formatstring+0x66>
 8001c2a:	e056      	b.n	8001cda <ts_formatstring+0xf6>
 8001c2c:	2b75      	cmp	r3, #117	; 0x75
 8001c2e:	d037      	beq.n	8001ca0 <ts_formatstring+0xbc>
 8001c30:	2b78      	cmp	r3, #120	; 0x78
 8001c32:	d040      	beq.n	8001cb6 <ts_formatstring+0xd2>
 8001c34:	e051      	b.n	8001cda <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	60fa      	str	r2, [r7, #12]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	1d11      	adds	r1, r2, #4
 8001c40:	6079      	str	r1, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	701a      	strb	r2, [r3, #0]
				break;
 8001c48:	e047      	b.n	8001cda <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	1d1a      	adds	r2, r3, #4
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da07      	bge.n	8001c6a <ts_formatstring+0x86>
					{
						val *= -1;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	425b      	negs	r3, r3
 8001c5e:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60fa      	str	r2, [r7, #12]
 8001c66:	222d      	movs	r2, #45	; 0x2d
 8001c68:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8001c6a:	69f9      	ldr	r1, [r7, #28]
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	220a      	movs	r2, #10
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff6e 	bl	8001b54 <ts_itoa>
				}
				break;
 8001c78:	e02f      	b.n	8001cda <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	1d1a      	adds	r2, r3, #4
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001c84:	e007      	b.n	8001c96 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	60fa      	str	r2, [r7, #12]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	1c51      	adds	r1, r2, #1
 8001c90:	61b9      	str	r1, [r7, #24]
 8001c92:	7812      	ldrb	r2, [r2, #0]
 8001c94:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f3      	bne.n	8001c86 <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 8001c9e:	e01c      	b.n	8001cda <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	1d1a      	adds	r2, r3, #4
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	220a      	movs	r2, #10
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff50 	bl	8001b54 <ts_itoa>
				break;
 8001cb4:	e011      	b.n	8001cda <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	1d1a      	adds	r2, r3, #4
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff44 	bl	8001b54 <ts_itoa>
				break;
 8001ccc:	e005      	b.n	8001cda <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	60fa      	str	r2, [r7, #12]
 8001cd4:	2225      	movs	r2, #37	; 0x25
 8001cd6:	701a      	strb	r2, [r3, #0]
				  break;
 8001cd8:	bf00      	nop
			}
			fmt++;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	e007      	b.n	8001cf2 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	60fa      	str	r2, [r7, #12]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	1c51      	adds	r1, r2, #1
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	7812      	ldrb	r2, [r2, #0]
 8001cf0:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f47f af7d 	bne.w	8001bf6 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	461a      	mov	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	1ad3      	subs	r3, r2, r3
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop

08001d14 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8001d14:	b40e      	push	{r1, r2, r3}
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	69f9      	ldr	r1, [r7, #28]
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff5b 	bl	8001be4 <ts_formatstring>
 8001d2e:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8001d30:	68fb      	ldr	r3, [r7, #12]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d3c:	b003      	add	sp, #12
 8001d3e:	4770      	bx	lr

08001d40 <__libc_init_array>:
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <__libc_init_array+0x3c>)
 8001d42:	b570      	push	{r4, r5, r6, lr}
 8001d44:	461e      	mov	r6, r3
 8001d46:	4c0e      	ldr	r4, [pc, #56]	; (8001d80 <__libc_init_array+0x40>)
 8001d48:	2500      	movs	r5, #0
 8001d4a:	1ae4      	subs	r4, r4, r3
 8001d4c:	10a4      	asrs	r4, r4, #2
 8001d4e:	42a5      	cmp	r5, r4
 8001d50:	d004      	beq.n	8001d5c <__libc_init_array+0x1c>
 8001d52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d56:	4798      	blx	r3
 8001d58:	3501      	adds	r5, #1
 8001d5a:	e7f8      	b.n	8001d4e <__libc_init_array+0xe>
 8001d5c:	f000 f816 	bl	8001d8c <_init>
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <__libc_init_array+0x44>)
 8001d62:	4c09      	ldr	r4, [pc, #36]	; (8001d88 <__libc_init_array+0x48>)
 8001d64:	461e      	mov	r6, r3
 8001d66:	1ae4      	subs	r4, r4, r3
 8001d68:	10a4      	asrs	r4, r4, #2
 8001d6a:	2500      	movs	r5, #0
 8001d6c:	42a5      	cmp	r5, r4
 8001d6e:	d004      	beq.n	8001d7a <__libc_init_array+0x3a>
 8001d70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d74:	4798      	blx	r3
 8001d76:	3501      	adds	r5, #1
 8001d78:	e7f8      	b.n	8001d6c <__libc_init_array+0x2c>
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}
 8001d7c:	08001db4 	.word	0x08001db4
 8001d80:	08001db4 	.word	0x08001db4
 8001d84:	08001db4 	.word	0x08001db4
 8001d88:	08001db8 	.word	0x08001db8

08001d8c <_init>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr

08001d98 <_fini>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	bf00      	nop
 8001d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9e:	bc08      	pop	{r3}
 8001da0:	469e      	mov	lr, r3
 8001da2:	4770      	bx	lr
